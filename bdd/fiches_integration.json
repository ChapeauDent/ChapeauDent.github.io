[{
  "fichier": "fiche-001",
  "competence": "Compétence : Ajouter du code CSS à un élément HTML",
  "objectif": "Objectif\n Savoir appliquer des styles CSS directement à un élément HTML pour en modifier l’apparence.",
  "theorie": "Théorie\n Le CSS (Cascading Style Sheets) permet de styliser les éléments HTML. Il existe trois façons principales d’ajouter du CSS :\n <ul>\n <li><strong>En ligne (inline)</strong> : directement dans la balise HTML via l’attribut <code>style</code>.</li>\n <li><strong>Interne</strong> : dans une balise <code>&lt;style&gt;</code> dans le <code>&lt;head&gt;</code> du document HTML.</li>\n <li><strong>Externe</strong> : via un fichier CSS séparé lié avec <code>&lt;link&gt;</code>.</li>\n </ul>\n L’ajout en ligne est utile pour des tests rapides ou des styles très spécifiques, mais il est déconseillé pour des projets à grande échelle.",
  "exemple": "Exemple\n Voici un exemple d’ajout de CSS en ligne :\n \n <p style=\"color: blue; font-size: 18px;\">Texte en bleu avec une taille de 18 pixels</p>\n \n Et un exemple avec une balise &lt;style&gt; :\n \n &lt;style&gt;\n   p {\n     color: green;\n     font-weight: bold;\n   }\n &lt;/style&gt;\n <p>Texte en vert et en gras</p>",
  "sources": "Sources Web\n <ul>\n <li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS\">MDN Web Docs – CSS</a></li>\n <li><a href=\"https://www.w3schools.com/css/\">W3Schools – CSS Tutorial</a></li>\n </ul>",
  "infos_supplementaires": "Bonnes pratiques :\n <ul>\n <li>Éviter les styles en ligne dans les projets professionnels.</li>\n <li>Préférer les fichiers CSS externes pour une meilleure organisation.</li>\n </ul>"
},
{
  "fichier": "fiche-002",
  "competence": "Compétence : Ajouter du JavaScript et CSS dans un document HTML",
  "objectif": "Objectif\n Savoir intégrer du code CSS et JavaScript dans une page HTML pour styliser et rendre la page interactive.",
  "theorie": "Théorie\n Une page HTML peut contenir du CSS et du JavaScript de plusieurs façons :\n <ul>\n <li><strong>CSS</strong> :\n   <ul>\n     <li><em>En ligne</em> : via l’attribut <code>style</code> dans une balise HTML.</li>\n     <li><em>Interne</em> : dans une balise <code>&lt;style&gt;</code> dans le <code>&lt;head&gt;</code>.</li>\n     <li><em>Externe</em> : via un fichier .css lié avec <code>&lt;link&gt;</code>.</li>\n   </ul>\n </li>\n <li><strong>JavaScript</strong> :\n   <ul>\n     <li><em>Interne</em> : dans une balise <code>&lt;script&gt;</code> (souvent en bas du <code>&lt;body&gt;</code>).</li>\n     <li><em>Externe</em> : via un fichier .js lié avec <code>&lt;script src=\"...\"&gt;</code>.</li>\n   </ul>\n </li>\n </ul>\n Il est recommandé de séparer le HTML, le CSS et le JavaScript pour une meilleure lisibilité et maintenance.",
  "exemple": "Exemple\n Voici un exemple de document HTML intégrant du CSS et du JavaScript :\n \n <!DOCTYPE html>\n <html>\n <head>\n   <title>Exemple</title>\n   &lt;style&gt;\n     body {\n       background-color: #f0f0f0;\n       font-family: Arial;\n     }\n   &lt;/style&gt;\n </head>\n <body>\n   <h1>Cliquez sur le bouton</h1>\n   <button onclick=\"changerTexte()\">Changer le texte</button>\n   <p id=\"demo\">Texte original</p>\n\n   <script>\n     function changerTexte() {\n       document.getElementById(\"demo\").innerText = \"Texte modifié !\";\n     }\n   </script>\n </body>\n </html>",
  "sources": "Sources Web\n <ul>\n <li><a href=\"https://developer.mozilla.org/fr/docs/Web/HTML\">MDN – HTML</a></li>\n <li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS\">MDN – CSS</a></li>\n <li><a href=\"https://developer.mozilla.org/fr/docs/Web/JavaScript\">MDN – JavaScript</a></li>\n </ul>",
  "infos_supplementaires": "Bonnes pratiques :\n <ul>\n <li>Placer les scripts JavaScript à la fin du <code>&lt;body&gt;</code> ou utiliser <code>defer</code> pour éviter de bloquer le chargement de la page.</li>\n <li>Utiliser des fichiers externes pour séparer le code et faciliter la maintenance.</li>\n </ul>"
},
{
  "fichier": "fiche-003",
  "competence": "Compétence : Lire une valeur du DOM, la traiter, et afficher le résultat dans la console",
  "objectif": "Objectif\n Savoir récupérer une valeur depuis le DOM, la manipuler avec JavaScript, puis afficher le résultat dans la console du navigateur.",
  "theorie": "Théorie\n Le DOM (Document Object Model) représente la structure d'une page HTML sous forme d'objet manipulable avec JavaScript. Pour interagir avec un élément du DOM, on utilise des méthodes comme :\n <ul>\n <li><code>document.getElementById()</code></li>\n <li><code>document.querySelector()</code></li>\n <li><code>element.value</code> pour les champs de formulaire</li>\n </ul>\n Une fois la valeur récupérée, on peut la traiter (ex. : calcul, transformation de texte) puis utiliser <code>console.log()</code> pour afficher le résultat dans la console du navigateur.",
  "exemple": "Exemple\n Voici un exemple simple :\n \n <input type=\"text\" id=\"nom\" placeholder=\"Entrez votre nom\">\n <button onclick=\"afficherNom()\">Afficher</button>\n\n <script>\n   function afficherNom() {\n     const nom = document.getElementById(\"nom\").value;\n     const message = \"Bonjour, \" + nom + \" !\";\n     console.log(message);\n   }\n </script>",
  "sources": "Sources Web\n <ul>\n <li><a href=\"https://developer.mozilla.org/fr/docs/Web/API/Document_Object_Model\">MDN – DOM</a></li>\n <li><a href=\"https://developer.mozilla.org/fr/docs/Web/API/Console/log\">MDN – console.log()</a></li>\n </ul>",
  "infos_supplementaires": "Bonnes pratiques :\n <ul>\n <li>Vérifier que l’élément existe avant d’y accéder.</li>\n <li>Utiliser <code>console.log()</code> pour le débogage pendant le développement.</li>\n </ul>"
},
{
  "fichier": "fiche-004",
  "competence": "Compétence : Comprendre la structure HTML de base et les balises sémantiques simples",
  "objectif": "Objectif\n Savoir identifier et utiliser les balises HTML de base pour structurer correctement une page web.",
  "theorie": "Théorie\n HTML (HyperText Markup Language) permet de structurer le contenu d’une page web. Une structure HTML de base comprend :\n <ul>\n <li><code>&lt;!DOCTYPE html&gt;</code> : indique le type de document.</li>\n <li><code>&lt;html&gt;</code> : racine du document HTML.</li>\n <li><code>&lt;head&gt;</code> : contient les métadonnées (titre, liens CSS, encodage, etc.).</li>\n <li><code>&lt;body&gt;</code> : contient le contenu visible de la page.</li>\n </ul>\n Les balises sémantiques simples permettent de donner du sens au contenu :\n <ul>\n <li><code>&lt;h1&gt; à &lt;h6&gt;</code> : titres hiérarchisés</li>\n <li><code>&lt;p&gt;</code> : paragraphe</li>\n <li><code>&lt;div&gt;</code> : conteneur générique</li>\n <li><code>&lt;span&gt;</code> : conteneur en ligne</li>\n <li><code>&lt;header&gt;</code>, <code>&lt;main&gt;</code>, <code>&lt;footer&gt;</code>, <code>&lt;section&gt;</code>, <code>&lt;article&gt;</code> : balises sémantiques pour structurer le contenu</li>\n </ul>",
  "exemple": "Exemple\n Voici une structure HTML minimale avec des balises sémantiques :\n \n <!DOCTYPE html>\n <html lang=\"fr\">\n <head>\n   <meta charset=\"UTF-8\">\n   <title>Ma première page</title>\n </head>\n <body>\n   <header>\n     <h1>Bienvenue</h1>\n   </header>\n   <main>\n     <section>\n       <h2>Présentation</h2>\n       <p>Ceci est un paragraphe d’introduction.</p>\n     </section>\n   </main>\n   <footer>\n     <p>© 2025 Mon site</p>\n   </footer>\n </body>\n </html>",
  "sources": "Sources Web\n <ul>\n <li><a href=\"https://developer.mozilla.org/fr/docs/Web/HTML\">MDN – HTML</a></li>\n <li><a href=\"https://www.w3schools.com/html/\">W3Schools – HTML Tutorial</a></li>\n </ul>",
  "infos_supplementaires": "Bonnes pratiques :\n <ul>\n <li>Utiliser les balises sémantiques pour améliorer l’accessibilité et le référencement.</li>\n <li>Respecter la hiérarchie des titres pour une structure logique.</li>\n </ul>"
},
{
  "fichier": "fiche-005",
  "competence": "Compétence : Importer un fichier CSS ou JS externe dans un document HTML",
  "objectif": "Objectif\n Savoir lier un fichier CSS ou JavaScript externe à une page HTML pour séparer le code et améliorer la maintenance.",
  "theorie": "Théorie\n Pour une meilleure organisation du code, il est recommandé de séparer le HTML, le CSS et le JavaScript dans des fichiers distincts. On peut les importer dans le document HTML de la manière suivante :\n <ul>\n <li><strong>CSS externe</strong> : dans le <code>&lt;head&gt;</code> avec la balise <code>&lt;link&gt;</code>\n <br><code>&lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;</code></li>\n <li><strong>JavaScript externe</strong> : généralement avant la fermeture de la balise <code>&lt;/body&gt;</code> avec la balise <code>&lt;script&gt;</code>\n <br><code>&lt;script src=\"script.js\"&gt;&lt;/script&gt;</code></li>\n </ul>\n Cela permet de réutiliser les fichiers dans plusieurs pages et de faciliter la maintenance du code.",
  "exemple": "Exemple\n Structure de fichiers :\n <ul>\n <li><code>index.html</code></li>\n <li><code>styles.css</code></li>\n <li><code>script.js</code></li>\n </ul>\n \n Contenu de <code>index.html</code> :\n \n <!DOCTYPE html>\n <html lang=\"fr\">\n <head>\n   <meta charset=\"UTF-8\">\n   <title>Page avec fichiers externes</title>\n   &lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;\n </head>\n <body>\n   <h1>Bonjour</h1>\n   <button onclick=\"direBonjour()\">Cliquez-moi</button>\n   <script src=\"script.js\"></script>\n </body>\n </html>",
  "sources": "Sources Web\n <ul>\n <li><a href=\"https://developer.mozilla.org/fr/docs/Web/HTML/Element/link\">MDN – &lt;link&gt;</a></li>\n <li><a href=\"https://developer.mozilla.org/fr/docs/Web/HTML/Element/script\">MDN – &lt;script&gt;</a></li>\n </ul>",
  "infos_supplementaires": "Bonnes pratiques :\n <ul>\n <li>Placer les fichiers CSS dans le <code>&lt;head&gt;</code> pour un chargement rapide du style.</li>\n <li>Placer les fichiers JS en bas de page ou utiliser <code>defer</code> pour ne pas bloquer le rendu HTML.</li>\n </ul>"
},
{
  "fichier": "fiche-006",
  "competence": "Compétence : Modifier dynamiquement un élément du DOM avec JavaScript",
  "objectif": "Objectif\n Savoir sélectionner un élément HTML avec JavaScript et modifier son contenu ou ses styles de manière dynamique.",
  "theorie": "Théorie\n Le DOM (Document Object Model) permet à JavaScript d’interagir avec les éléments HTML d’une page. Pour modifier dynamiquement un élément, on suit généralement ces étapes :\n <ul>\n <li>Sélectionner l’élément avec <code>document.getElementById()</code>, <code>document.querySelector()</code>, etc.</li>\n <li>Modifier son contenu avec <code>innerText</code>, <code>innerHTML</code> ou ses attributs avec <code>setAttribute()</code>.</li>\n <li>Changer son style avec <code>element.style</code>.</li>\n </ul>\n Ces manipulations permettent de rendre la page interactive sans la recharger.",
  "exemple": "Exemple\n <p id=\"texte\">Texte original</p>\n <button onclick=\"changerTexte()\">Changer le texte</button>\n\n <script>\n   function changerTexte() {\n     const element = document.getElementById(\"texte\");\n     element.innerText = \"Texte modifié dynamiquement !\";\n     element.style.color = \"red\";\n     element.style.fontWeight = \"bold\";\n   }\n </script>",
  "sources": "Sources Web\n <ul>\n <li><a href=\"https://developer.mozilla.org/fr/docs/Web/API/Document_Object_Model\">MDN – DOM</a></li>\n <li><a href=\"https://developer.mozilla.org/fr/docs/Web/API/Element\">MDN – Element</a></li>\n </ul>",
  "infos_supplementaires": "Bonnes pratiques :\n <ul>\n <li>Utiliser <code>classList</code> pour ajouter ou retirer des classes CSS plutôt que modifier directement les styles.</li>\n <li>Éviter les modifications excessives du DOM pour ne pas nuire aux performances.</li>\n </ul>"
},
{
  "fichier": "fiche-007",
  "competence": "Compétence : Détecter une erreur simple dans une portion de code",
  "objectif": "Objectif\n Être capable d’identifier une erreur courante dans un code HTML, CSS ou JavaScript et comprendre comment la corriger.",
  "theorie": "Théorie\n Les erreurs simples dans le code peuvent être :\n <ul>\n <li><strong>Syntaxiques</strong> : fautes de frappe, balises non fermées, parenthèses manquantes.</li>\n <li><strong>Logiques</strong> : mauvaise utilisation d’une variable, d’une condition ou d’un sélecteur.</li>\n <li><strong>De référence</strong> : appel à un élément ou une fonction qui n’existe pas.</li>\n </ul>\n Pour les détecter, on peut :\n <ul>\n <li>Lire attentivement le code ligne par ligne.</li>\n <li>Utiliser la console du navigateur pour repérer les erreurs JavaScript.</li>\n <li>Valider le HTML/CSS avec des outils comme le validateur W3C.</li>\n </ul>",
  "exemple": "Exemple\n Erreur JavaScript :\n <script>\n   function direBonjour() {\n     console.log(\"Bonjour\");\n   }\n   direBonjou(); // Erreur : fonction mal orthographiée\n </script>\n\n Correction :\n <script>\n   function direBonjour() {\n     console.log(\"Bonjour\");\n   }\n   direBonjour();\n </script>",
  "sources": "Sources Web\n <ul>\n <li><a href=\"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide\">MDN – Guide JavaScript</a></li>\n <li><a href=\"https://validator.w3.org/\">W3C – Validateur HTML</a></li>\n </ul>",
  "infos_supplementaires": "Bonnes pratiques :\n <ul>\n <li>Lire les messages d’erreur dans la console pour comprendre leur origine.</li>\n <li>Utiliser des noms clairs et cohérents pour les fonctions et les variables.</li>\n <li>Tester régulièrement son code pour détecter les erreurs rapidement.</li>\n </ul>"
},
{
  "fichier": "fiche-008",
  "competence": "Compétence : Utiliser les outils de développement du navigateur (console, inspecteur)",
  "objectif": "Objectif\n Savoir utiliser les outils intégrés aux navigateurs pour inspecter, tester et déboguer une page web.",
  "theorie": "Théorie\n Les navigateurs modernes (Chrome, Firefox, Edge, etc.) intègrent des outils de développement accessibles via la touche <code>F12</code> ou clic droit → \"Inspecter\". Ces outils permettent :\n <ul>\n <li><strong>Inspecteur</strong> : visualiser et modifier le HTML et le CSS en temps réel.</li>\n <li><strong>Console</strong> : afficher des messages, erreurs et exécuter du code JavaScript.</li>\n <li><strong>Réseau</strong> : analyser les requêtes HTTP et le temps de chargement.</li>\n <li><strong>Sources</strong> : consulter les fichiers JS/CSS et poser des points d’arrêt pour le débogage.</li>\n <li><strong>Accessibilité</strong> : vérifier les rôles, contrastes et navigation clavier.</li>\n </ul>",
  "exemple": "Exemple\n 1. Ouvrir une page web dans le navigateur.\n 2. Appuyer sur <code>F12</code> ou clic droit → \"Inspecter\".\n 3. Dans l’onglet \"Éléments\" (ou \"Inspector\"), survoler un élément pour voir son style.\n 4. Dans l’onglet \"Console\", taper :\n <code>console.log(\"Test de la console\")</code>\n 5. Modifier un style CSS directement dans l’inspecteur pour tester un rendu.",
  "sources": "Sources Web\n <ul>\n <li><a href=\"https://developer.mozilla.org/fr/docs/Tools\">MDN – Outils de développement</a></li>\n <li><a href=\"https://web.dev/learn/tools/\">Google Web Dev – Learn DevTools</a></li>\n </ul>",
  "infos_supplementaires": "Bonnes pratiques :\n <ul>\n <li>Utiliser la console pour tester rapidement du code JavaScript.</li>\n <li>Utiliser l’inspecteur pour comprendre la structure d’une page ou corriger un bug CSS.</li>\n <li>Analyser les performances de chargement via l’onglet \"Réseau\".</li>\n </ul>"
},
{
  "fichier": "fiche-009",
  "competence": "Compétence : Appliquer des sélecteurs CSS avancés (:hover, nth-child, etc.)",
  "objectif": "Objectif\n Savoir utiliser des sélecteurs CSS avancés pour cibler précisément des éléments HTML et appliquer des styles dynamiques ou conditionnels.",
  "theorie": "Théorie\n Les sélecteurs CSS permettent de cibler des éléments HTML pour leur appliquer des styles. En plus des sélecteurs simples (par balise, classe, ID), il existe des sélecteurs avancés :\n <ul>\n <li><code>:hover</code> : applique un style lorsqu’un élément est survolé par la souris.</li>\n <li><code>:nth-child(n)</code> : cible le nième enfant d’un parent.</li>\n <li><code>:first-child</code>, <code>:last-child</code> : ciblent le premier ou dernier enfant.</li>\n <li><code>:not(selector)</code> : exclut un élément correspondant au sélecteur donné.</li>\n <li><code>[attribute]</code> : cible les éléments possédant un attribut spécifique.</li>\n </ul>\n Ces sélecteurs permettent de styliser des éléments sans ajouter de classes supplémentaires dans le HTML.",
  "exemple": "Exemple\n &lt;style&gt;\n   li:nth-child(odd) {\n     background-color: #f0f0f0;\n   }\n   a:hover {\n     color: red;\n     text-decoration: underline;\n   }\n   p:not(.important) {\n     color: gray;\n   }\n &lt;/style&gt;\n\n <ul>\n   <li>Élément 1</li>\n   <li>Élément 2</li>\n   <li>Élément 3</li>\n </ul>\n\n <a href=\"#\">Lien</a>\n <p>Texte normal</p>\n <p class=\"important\">Texte important</p>",
  "sources": "Sources Web\n <ul>\n <li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/Pseudo-classes\">MDN – Pseudo-classes CSS</a></li>\n <li><a href=\"https://www.w3schools.com/css/css_selectors.asp\">W3Schools – CSS Selectors</a></li>\n </ul>",
  "infos_supplementaires": "Bonnes pratiques :\n <ul>\n <li>Utiliser les sélecteurs avancés pour éviter de surcharger le HTML avec des classes inutiles.</li>\n <li>Tester les sélecteurs dans l’inspecteur du navigateur pour vérifier leur portée.</li>\n </ul>"
},
{
  "fichier": "fiche-010",
  "competence": "Compétence : Comprendre le modèle de boîte CSS (box model)",
  "objectif": "Objectif\n Comprendre comment les éléments HTML sont modélisés en boîtes et comment les propriétés CSS influencent leur taille et leur position.",
  "theorie": "Théorie\n En CSS, chaque élément HTML est représenté comme une boîte rectangulaire selon le modèle de boîte (box model). Cette boîte est composée de plusieurs couches :\n <ul>\n <li><strong>Content</strong> : le contenu réel (texte, image, etc.).</li>\n <li><strong>Padding</strong> : l’espace entre le contenu et la bordure.</li>\n <li><strong>Border</strong> : la bordure entourant le padding.</li>\n <li><strong>Margin</strong> : l’espace entre la bordure et les éléments voisins.</li>\n </ul>\n La propriété <code>box-sizing</code> permet de contrôler si la largeur/hauteur inclut le padding et la bordure (<code>border-box</code>) ou non (<code>content-box</code>, valeur par défaut).",
  "exemple": "Exemple\n &lt;style&gt;\n   .boite {\n     width: 200px;\n     padding: 20px;\n     border: 5px solid black;\n     margin: 10px;\n     box-sizing: border-box;\n     background-color: lightblue;\n   }\n &lt;/style&gt;\n\n <div class=\"boite\">Contenu de la boîte</div>",
  "sources": "Sources Web\n <ul>\n <li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/CSS_box_model\">MDN – Modèle de boîte CSS</a></li>\n <li><a href=\"https://www.w3schools.com/css/css_boxmodel.asp\">W3Schools – CSS Box Model</a></li>\n </ul>",
  "infos_supplementaires": "Bonnes pratiques :\n <ul>\n <li>Utiliser <code>box-sizing: border-box</code> pour simplifier les calculs de largeur/hauteur.</li>\n <li>Utiliser l’inspecteur du navigateur pour visualiser les dimensions réelles d’un élément.</li>\n </ul>"
},
{
  "fichier": "fiche-011",
  "competence": "Compétence : Implémenter une mise en page CSS (ex. : jeu de cartes) à partir d’un HTML donné",
  "objectif": "Objectif\n Savoir utiliser le CSS pour organiser visuellement des éléments HTML selon une maquette ou une structure donnée (ex. : grille de cartes).",
  "theorie": "Théorie\n Pour créer une mise en page de type \"jeu de cartes\", on utilise souvent les techniques suivantes :\n <ul>\n <li><strong>Flexbox</strong> : pour aligner les cartes en ligne ou en colonne avec des espacements dynamiques.</li>\n <li><strong>Grid</strong> : pour créer une grille régulière avec un nombre fixe de colonnes ou de lignes.</li>\n <li><strong>Boîte CSS</strong> : pour gérer les marges, paddings, bordures et dimensions des cartes.</li>\n </ul>\n Chaque carte peut être stylisée avec une classe CSS commune, et contenir des éléments comme un titre, une image, une description, etc.",
  "exemple": "Exemple\n HTML :\n <div class=\"cartes\">\n   <div class=\"carte\">\n     <h3>Carte 1</h3>\n     <p>Description</p>\n   </div>\n   <div class=\"carte\">\n     <h3>Carte 2</h3>\n     <p>Description</p>\n   </div>\n </div>\n\n CSS :\n &lt;style&gt;\n   .cartes {\n     display: flex;\n     gap: 20px;\n     flex-wrap: wrap;\n   }\n   .carte {\n     width: 200px;\n     padding: 15px;\n     border: 1px solid #ccc;\n     border-radius: 8px;\n     background-color: #f9f9f9;\n     box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n   }\n &lt;/style&gt;",
  "sources": "Sources Web\n <ul>\n <li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/CSS_Flexible_Box_Layout\">MDN – Flexbox</a></li>\n <li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/CSS_Grid_Layout\">MDN – CSS Grid</a></li>\n </ul>",
  "infos_supplementaires": "Bonnes pratiques :\n <ul>\n <li>Utiliser des classes réutilisables pour les composants (ex. : .carte).</li>\n <li>Prévoir un comportement responsive avec <code>flex-wrap</code> ou <code>grid-template-columns</code> adaptatif.</li>\n </ul>"
},
{
  "fichier": "fiche-012",
  "competence": "Compétence : Utiliser Flexbox et Grid Layout pour structurer une page",
  "objectif": "Objectif\n Savoir utiliser les modules CSS Flexbox et Grid pour organiser les éléments d’une page web de manière flexible et responsive.",
  "theorie": "Théorie\n Flexbox et Grid sont deux systèmes de mise en page modernes en CSS :\n <ul>\n <li><strong>Flexbox</strong> : idéal pour les alignements en ligne ou en colonne. Il permet de distribuer l’espace entre les éléments et de les aligner facilement.</li>\n <li><strong>Grid</strong> : conçu pour les mises en page bidimensionnelles (lignes et colonnes). Il permet de créer des grilles complexes avec un contrôle précis.</li>\n </ul>\n Ces deux systèmes utilisent des propriétés spécifiques comme <code>display: flex</code>, <code>justify-content</code>, <code>align-items</code> pour Flexbox, et <code>display: grid</code>, <code>grid-template-columns</code>, <code>grid-gap</code> pour Grid.",
  "exemple": "Exemple\n &lt;style&gt;\n   .flex-container {\n     display: flex;\n     justify-content: space-between;\n     align-items: center;\n   }\n   .grid-container {\n     display: grid;\n     grid-template-columns: repeat(3, 1fr);\n     gap: 20px;\n   }\n   .item {\n     background-color: #ddd;\n     padding: 20px;\n     text-align: center;\n   }\n &lt;/style&gt;\n\n <div class=\"flex-container\">\n   <div class=\"item\">Flex 1</div>\n   <div class=\"item\">Flex 2</div>\n   <div class=\"item\">Flex 3</div>\n </div>\n\n <div class=\"grid-container\">\n   <div class=\"item\">Grid 1</div>\n   <div class=\"item\">Grid 2</div>\n   <div class=\"item\">Grid 3</div>\n </div>",
  "sources": "Sources Web\n <ul>\n <li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/CSS_Flexible_Box_Layout\">MDN – Flexbox</a></li>\n <li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/CSS_Grid_Layout\">MDN – CSS Grid</a></li>\n <li><a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">CSS-Tricks – Guide complet Grid</a></li>\n </ul>",
  "infos_supplementaires": "Bonnes pratiques :\n <ul>\n <li>Utiliser Flexbox pour des alignements simples et Grid pour des mises en page complexes.</li>\n <li>Combiner les deux systèmes si nécessaire, en gardant une structure claire.</li>\n <li>Tester le rendu sur différentes tailles d’écran pour assurer la responsivité.</li>\n </ul>"
},
{
  "fichier": "fiche-013",
  "competence": "Compétence : Intégrer une maquette responsive avec media queries",
  "objectif": "Objectif\n Savoir adapter une mise en page HTML/CSS pour qu’elle s’affiche correctement sur différents types d’écrans (mobile, tablette, desktop).",
  "theorie": "Théorie\n Le responsive design permet à une page web de s’adapter à la taille de l’écran de l’utilisateur. Cela se fait principalement avec les <strong>media queries</strong> en CSS. Une media query applique des styles spécifiques selon certaines conditions (largeur d’écran, orientation, résolution, etc.).\n <br>Syntaxe de base :\n <pre>@media (max-width: 768px) {\n  /* styles pour les petits écrans */\n}</pre>\n On utilise souvent une approche <strong>mobile-first</strong>, où les styles de base sont conçus pour les petits écrans, puis adaptés pour les écrans plus larges.",
  "exemple": "Exemple\n &lt;style&gt;\n   .conteneur {\n     display: flex;\n     flex-direction: row;\n   }\n   @media (max-width: 768px) {\n     .conteneur {\n       flex-direction: column;\n     }\n   }\n &lt;/style&gt;\n\n <div class=\"conteneur\">\n   <div>Bloc 1</div>\n   <div>Bloc 2</div>\n </div>\n\n Ce code affiche les blocs côte à côte sur grand écran, et les empile verticalement sur mobile.",
  "sources": "Sources Web\n <ul>\n <li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/Media_Queries\">MDN – Media Queries</a></li>\n <li><a href=\"https://www.w3schools.com/css/css_rwd_mediaqueries.asp\">W3Schools – Responsive Web Design</a></li>\n </ul>",
  "infos_supplementaires": "Bonnes pratiques :\n <ul>\n <li>Utiliser des unités relatives (<code>%</code>, <code>em</code>, <code>rem</code>, <code>vw</code>, <code>vh</code>) pour une meilleure adaptabilité.</li>\n <li>Tester la maquette sur plusieurs tailles d’écran ou utiliser les outils de développement du navigateur (mode responsive).</li>\n </ul>"
},
{
  "fichier": "fiche-014",
  "competence": "Compétence : Utiliser des unités relatives (em, rem, %, vh, vw)",
  "objectif": "Objectif\n Comprendre et utiliser les unités relatives en CSS pour créer des mises en page flexibles et adaptables.",
  "theorie": "Théorie\n Les unités relatives permettent de dimensionner les éléments en fonction de leur contexte, ce qui favorise la responsivité :\n <ul>\n <li><code>em</code> : relatif à la taille de police de l’élément parent.</li>\n <li><code>rem</code> : relatif à la taille de police de l’élément racine (<code>html</code>).</li>\n <li><code>%</code> : relatif à la taille de l’élément parent (largeur, hauteur, padding, etc.).</li>\n <li><code>vh</code> : 1% de la hauteur de la fenêtre (viewport height).</li>\n <li><code>vw</code> : 1% de la largeur de la fenêtre (viewport width).</li>\n </ul>\n Ces unités sont préférées aux unités fixes (comme <code>px</code>) pour créer des interfaces adaptatives.",
  "exemple": "Exemple\n &lt;style&gt;\n   html {\n     font-size: 16px;\n   }\n   .texte {\n     font-size: 1.5rem; /* 24px */\n     padding: 2em; /* 2x la taille de police du parent */\n     width: 80%;\n     height: 50vh;\n     background-color: #eef;\n   }\n &lt;/style&gt;\n\n <div class=\"texte\">Texte avec unités relatives</div>",
  "sources": "Sources Web\n <ul>\n <li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/length\">MDN – Unités CSS</a></li>\n <li><a href=\"https://www.w3schools.com/cssref/css_units.asp\">W3Schools – CSS Units</a></li>\n </ul>",
  "infos_supplementaires": "Bonnes pratiques :\n <ul>\n <li>Utiliser <code>rem</code> pour une cohérence globale de la typographie.</li>\n <li>Utiliser <code>%</code>, <code>vh</code> et <code>vw</code> pour adapter les dimensions aux écrans.</li>\n <li>Éviter les <code>px</code> pour les tailles de texte afin de respecter les préférences d’accessibilité.</li>\n </ul>"
},
{
  "fichier": "fiche-015",
  "competence": "Compétence : Gérer les images adaptatives (srcset, object-fit)",
  "objectif": "Objectif\n Savoir adapter les images à différents écrans et contextes d’affichage pour améliorer l’expérience utilisateur et les performances.",
  "theorie": "Théorie\n Pour rendre les images adaptatives, on utilise deux techniques principales :\n <ul>\n <li><strong><code>srcset</code></strong> : permet de spécifier plusieurs versions d’une image pour différents écrans (résolution, taille). Utilisé avec <code>&lt;img&gt;</code> ou <code>&lt;picture&gt;</code>.</li>\n <li><strong><code>object-fit</code></strong> : contrôle la façon dont une image est redimensionnée pour remplir son conteneur (utile pour les images de fond ou les miniatures).</li>\n </ul>\n Ces techniques permettent d’optimiser le chargement et l’affichage des images sur tous types de périphériques.",
  "exemple": "Exemple\n <img \n   src=\"image-small.jpg\" \n   srcset=\"image-small.jpg 480w, image-medium.jpg 800w, image-large.jpg 1200w\" \n   sizes=\"(max-width: 600px) 480px, (max-width: 900px) 800px, 1200px\" \n   alt=\"Exemple d’image responsive\">\n\n &lt;style&gt;\n   .image-cadre {\n     width: 300px;\n     height: 200px;\n     object-fit: cover;\n   }\n &lt;/style&gt;\n\n <img src=\"photo.jpg\" class=\"image-cadre\" alt=\"Image recadrée\">",
  "sources": "Sources Web\n <ul>\n <li><a href=\"https://developer.mozilla.org/fr/docs/Web/HTML/Element/img#attr-srcset\">MDN – srcset</a></li>\n <li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/object-fit\">MDN – object-fit</a></li>\n </ul>",
  "infos_supplementaires": "Bonnes pratiques :\n <ul>\n <li>Utiliser <code>srcset</code> pour améliorer les performances sur mobile et écrans haute résolution.</li>\n <li>Utiliser <code>object-fit: cover</code> pour conserver le ratio d’image tout en remplissant un cadre.</li>\n <li>Optimiser les images (taille, format) avant intégration.</li>\n </ul>"
},
{
  "fichier": "fiche-016",
  "competence": "Compétence : Respecter une hiérarchie sémantique (header, main, section, etc.)",
  "objectif": "Objectif\n Savoir structurer une page HTML avec des balises sémantiques pour améliorer la lisibilité, l’accessibilité et le référencement.",
  "theorie": "Théorie\n Les balises sémantiques HTML donnent du sens au contenu d’une page. Elles permettent aux navigateurs, moteurs de recherche et technologies d’assistance de mieux comprendre la structure du document. Voici les principales balises sémantiques :\n <ul>\n <li><code>&lt;header&gt;</code> : en-tête de page ou de section.</li>\n <li><code>&lt;main&gt;</code> : contenu principal de la page (unique).</li>\n <li><code>&lt;section&gt;</code> : regroupe un ensemble cohérent de contenu.</li>\n <li><code>&lt;article&gt;</code> : contenu autonome (ex. : article de blog).</li>\n <li><code>&lt;aside&gt;</code> : contenu secondaire (ex. : barre latérale).</li>\n <li><code>&lt;footer&gt;</code> : pied de page ou de section.</li>\n </ul>\n Une bonne hiérarchie sémantique améliore l’accessibilité et le SEO.",
  "exemple": "Exemple\n <!DOCTYPE html>\n <html lang=\"fr\">\n <head>\n   <meta charset=\"UTF-8\">\n   <title>Exemple sémantique</title>\n </head>\n <body>\n   <header>\n     <h1>Mon site</h1>\n   </header>\n   <main>\n     <section>\n       <h2>Présentation</h2>\n       <p>Bienvenue sur mon site web.</p>\n     </section>\n     <article>\n       <h2>Article du jour</h2>\n       <p>Voici un contenu autonome.</p>\n     </article>\n   </main>\n   <footer>\n     <p>© 2025 Mon site</p>\n   </footer>\n </body>\n </html>",
  "sources": "Sources Web\n <ul>\n <li><a href=\"https://developer.mozilla.org/fr/docs/Web/HTML/Element\">MDN – Éléments HTML</a></li>\n <li><a href=\"https://www.w3schools.com/html/html5_semantic_elements.asp\">W3Schools – HTML5 Semantic Elements</a></li>\n </ul>",
  "infos_supplementaires": "Bonnes pratiques :\n <ul>\n <li>Utiliser une seule balise <code>&lt;main&gt;</code> par page.</li>\n <li>Ne pas utiliser <code>&lt;div&gt;</code> à la place des balises sémantiques sans raison.</li>\n <li>Respecter l’ordre logique des titres (<code>&lt;h1&gt;</code> à <code>&lt;h6&gt;</code>).</li>\n </ul>"
},
{
  "fichier": "fiche-017",
  "competence": "Compétence : Créer un formulaire HTML, appliquer des styles CSS, et le valider avec JavaScript",
  "objectif": "Objectif\n Savoir créer un formulaire fonctionnel, le styliser avec CSS, et vérifier les données saisies côté client avec JavaScript.",
  "theorie": "Théorie\n Un formulaire HTML permet de collecter des données utilisateur via des champs comme <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, <code>&lt;select&gt;</code>, etc. Le CSS permet de personnaliser l’apparence du formulaire. Le JavaScript permet de valider les données avant l’envoi (ex. : vérifier qu’un champ n’est pas vide ou qu’un email est valide).\n <br>Étapes typiques :\n <ul>\n <li>Créer les champs avec les balises HTML appropriées.</li>\n <li>Appliquer des styles CSS pour améliorer l’ergonomie.</li>\n <li>Ajouter un gestionnaire d’événement <code>submit</code> pour intercepter l’envoi et effectuer les vérifications.</li>\n </ul>",
  "exemple": "Exemple\n HTML :\n <form id=\"contact\">\n   <label for=\"email\">Email :</label>\n   <input type=\"email\" id=\"email\" required>\n   <button type=\"submit\">Envoyer</button>\n </form>\n\n CSS :\n &lt;style&gt;\n   form {\n     max-width: 400px;\n     margin: auto;\n     padding: 20px;\n     border: 1px solid #ccc;\n     border-radius: 5px;\n   }\n   input {\n     width: 100%;\n     padding: 10px;\n     margin-bottom: 10px;\n   }\n &lt;/style&gt;\n\n JavaScript :\n <script>\n   document.getElementById(\"contact\").addEventListener(\"submit\", function(e) {\n     const email = document.getElementById(\"email\").value;\n     if (!email.includes(\"@\")) {\n       alert(\"Veuillez entrer un email valide.\");\n       e.preventDefault();\n     }\n   });\n </script>",
  "sources": "Sources Web\n <ul>\n <li><a href=\"https://developer.mozilla.org/fr/docs/Web/HTML/Element/form\">MDN – Formulaires HTML</a></li>\n <li><a href=\"https://developer.mozilla.org/fr/docs/Web/API/HTMLFormElement/submit_event\">MDN – Événement submit</a></li>\n </ul>",
  "infos_supplementaires": "Bonnes pratiques :\n <ul>\n <li>Utiliser les attributs HTML5 (<code>required</code>, <code>type=\"email\"</code>, etc.) pour une validation de base.</li>\n <li>Compléter avec une validation JavaScript pour plus de contrôle.</li>\n <li>Afficher les messages d’erreur de manière claire et accessible.</li>\n </ul>"
},
{
  "fichier": "fiche-018",
  "competence": "Compétence : Identifier l’origine d’une erreur via la trace de pile dans la console",
  "objectif": "Objectif\n Savoir lire et interpréter une trace d’erreur JavaScript dans la console du navigateur pour localiser et corriger une erreur dans le code.",
  "theorie": "Théorie\n Lorsqu’une erreur JavaScript se produit, le navigateur affiche une trace de pile (stack trace) dans la console. Cette trace indique :\n <ul>\n <li>Le type d’erreur (ex. : <code>ReferenceError</code>, <code>TypeError</code>).</li>\n <li>Le message d’erreur (ex. : <code>myFunction is not defined</code>).</li>\n <li>Le fichier et la ligne où l’erreur s’est produite.</li>\n <li>La chaîne d’appels de fonctions ayant mené à l’erreur.</li>\n </ul>\n En analysant cette trace, on peut remonter à la source du problème et comprendre le contexte dans lequel il s’est produit.",
  "exemple": "Exemple\n Code JavaScript :\n <script>\n   function calculer() {\n     afficherResultat(); // Erreur : fonction non définie\n   }\n   calculer();\n </script>\n\n Console :\n <pre>\n Uncaught ReferenceError: afficherResultat is not defined\n     at calculer (script.js:2)\n     at script.js:4\n </pre>\n\n Cette trace indique que l’erreur se produit à la ligne 2 dans la fonction <code>calculer()</code>.",
  "sources": "Sources Web\n <ul>\n <li><a href=\"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Errors\">MDN – Types d’erreurs JavaScript</a></li>\n <li><a href=\"https://developer.chrome.com/docs/devtools/console/errors\">Chrome DevTools – Lire les erreurs</a></li>\n </ul>",
  "infos_supplementaires": "Bonnes pratiques :\n <ul>\n <li>Lire attentivement le message d’erreur et la ligne concernée.</li>\n <li>Utiliser les outils de développement pour poser des points d’arrêt et examiner les variables.</li>\n <li>Tester les fonctions individuellement pour isoler les erreurs.</li>\n </ul>"
},
{
  "fichier": "fiche-019",
  "competence": "Compétence : Ajouter des attributs ARIA pour l’accessibilité",
  "objectif": "Objectif\n Comprendre l’utilité des attributs ARIA et savoir les utiliser pour améliorer l’accessibilité d’une page web pour les technologies d’assistance.",
  "theorie": "Théorie\n ARIA (Accessible Rich Internet Applications) est un ensemble d’attributs HTML qui améliorent l’accessibilité des interfaces web, notamment pour les utilisateurs de lecteurs d’écran. Ces attributs permettent de :\n <ul>\n <li>Décrire le rôle d’un élément (<code>role</code>).</li>\n <li>Fournir des états ou propriétés (<code>aria-checked</code>, <code>aria-expanded</code>, etc.).</li>\n <li>Établir des relations entre les éléments (<code>aria-labelledby</code>, <code>aria-describedby</code>).</li>\n </ul>\n Les attributs ARIA ne modifient pas l’apparence visuelle, mais enrichissent l’information transmise aux technologies d’assistance.",
  "exemple": "Exemple\n <button aria-expanded=\"false\" aria-controls=\"menu\" onclick=\"toggleMenu()\">Menu</button>\n <ul id=\"menu\" hidden>\n   <li><a href=\"#\">Accueil</a></li>\n   <li><a href=\"#\">Contact</a></li>\n </ul>\n\n <script>\n   function toggleMenu() {\n     const menu = document.getElementById(\"menu\");\n     const button = document.querySelector(\"button\");\n     const isOpen = menu.hasAttribute(\"hidden\") === false;\n     menu.hidden = isOpen;\n     button.setAttribute(\"aria-expanded\", !isOpen);\n   }\n </script>",
  "sources": "Sources Web\n <ul>\n <li><a href=\"https://developer.mozilla.org/fr/docs/Web/Accessibility/ARIA\">MDN – ARIA</a></li>\n <li><a href=\"https://www.w3.org/WAI/ARIA/apg/\">W3C – ARIA Authoring Practices</a></li>\n </ul>",
  "infos_supplementaires": "Bonnes pratiques :\n <ul>\n <li>Utiliser ARIA uniquement lorsque les balises HTML natives ne suffisent pas.</li>\n <li>Tester l’accessibilité avec un lecteur d’écran ou des outils comme Lighthouse ou axe DevTools.</li>\n <li>Ne pas surcharger le code avec des attributs ARIA inutiles.</li>\n </ul>"
},
{
  "fichier": "fiche-020",
  "competence": "Compétence : Vérifier la navigation clavier et les contrastes",
  "objectif": "Objectif\n S’assurer qu’une page web est accessible aux utilisateurs naviguant au clavier et que les contrastes de couleurs respectent les normes d’accessibilité.",
  "theorie": "Théorie\n L’accessibilité web implique que tous les utilisateurs, y compris ceux en situation de handicap, puissent naviguer efficacement. Deux aspects essentiels sont :\n <ul>\n <li><strong>Navigation clavier</strong> : tous les éléments interactifs (liens, boutons, champs de formulaire) doivent être accessibles avec la touche <code>Tab</code> et activables avec <code>Entrée</code> ou <code>Espace</code>.</li>\n <li><strong>Contraste</strong> : le contraste entre le texte et l’arrière-plan doit être suffisant pour garantir la lisibilité. Le WCAG recommande un ratio de contraste minimum de 4.5:1 pour le texte normal.</li>\n </ul>\n Des outils permettent de tester ces critères automatiquement ou manuellement.",
  "exemple": "Exemple\n <button>Valider</button>\n <a href=\"#\">Lien</a>\n <input type=\"text\" placeholder=\"Nom\">\n\n Ces éléments doivent pouvoir être atteints avec la touche <code>Tab</code> dans l’ordre logique du document.\n\n Pour le contraste :\n &lt;style&gt;\n   .texte {\n     color: #000;\n     background-color: #fff;\n   }\n &lt;/style&gt;\n\n Ce style garantit un contraste élevé (21:1).",
  "sources": "Sources Web\n <ul>\n <li><a href=\"https://www.w3.org/WAI/WCAG21/quickref/\">W3C – WCAG 2.1</a></li>\n <li><a href=\"https://developer.mozilla.org/fr/docs/Web/Accessibility/Keyboard-navigable_JavaScript_widgets\">MDN – Navigation clavier</a></li>\n <li><a href=\"https://webaim.org/resources/contrastchecker/\">WebAIM – Contrast Checker</a></li>\n </ul>",
  "infos_supplementaires": "Bonnes pratiques :\n <ul>\n <li>Tester la navigation avec <code>Tab</code>, <code>Entrée</code> et <code>Échap</code> sans utiliser la souris.</li>\n <li>Utiliser des outils comme axe DevTools, Lighthouse ou Wave pour vérifier l’accessibilité.</li>\n <li>Éviter les textes clairs sur fond clair ou les contrastes trop faibles.</li>\n </ul>"
},
{
  "fichier": "fiche-021",
  "competence": "Compétence : Utiliser un préprocesseur CSS (comme Sass)",
  "objectif": "Objectif\n Comprendre le rôle d’un préprocesseur CSS et savoir utiliser Sass pour écrire du CSS plus structuré, maintenable et réutilisable.",
  "theorie": "Théorie\n Un préprocesseur CSS comme Sass (Syntactically Awesome Stylesheets) permet d’écrire du CSS avec des fonctionnalités avancées qui ne sont pas disponibles en CSS natif :\n <ul>\n <li><strong>Variables</strong> : stocker des valeurs réutilisables (couleurs, tailles, etc.).</li>\n <li><strong>Nesting</strong> : imbriquer les sélecteurs pour refléter la structure HTML.</li>\n <li><strong>Mixins</strong> : blocs de code réutilisables avec ou sans paramètres.</li>\n <li><strong>Partials et imports</strong> : découper le code en fichiers modulaires.</li>\n </ul>\n Sass doit être compilé en CSS standard à l’aide d’un outil comme Dart Sass, Webpack ou Vite.",
  "exemple": "Exemple (Sass)\n $couleur-primaire: #3498db;\n\n .bouton {\n   background-color: $couleur-primaire;\n   color: white;\n   padding: 10px 20px;\n   border-radius: 5px;\n   &:hover {\n     background-color: darken($couleur-primaire, 10%);\n   }\n }\n\n Compilation :\n <pre>sass style.scss style.css</pre>",
  "sources": "Sources Web\n <ul>\n <li><a href=\"https://sass-lang.com/guide\">Sass – Guide officiel</a></li>\n <li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/Sass\">MDN – Sass</a></li>\n </ul>",
  "infos_supplementaires": "Bonnes pratiques :\n <ul>\n <li>Utiliser des variables pour centraliser les couleurs, tailles, polices, etc.</li>\n <li>Organiser le code en fichiers partiels (<code>_fichier.scss</code>) et les importer dans un fichier principal.</li>\n <li>Automatiser la compilation avec un outil de build (npm script, Webpack, etc.).</li>\n </ul>"
},
{
  "fichier": "fiche-022",
  "competence": "Compétence : Intégrer un design system ou une bibliothèque CSS (Bootstrap, Tailwind)",
  "objectif": "Objectif\n Savoir utiliser une bibliothèque CSS ou un design system pour accélérer le développement d’interfaces cohérentes et responsives.",
  "theorie": "Théorie\n Un design system ou une bibliothèque CSS fournit un ensemble de composants, de classes utilitaires et de règles de style prêtes à l’emploi. Cela permet de :\n <ul>\n <li>Gagner du temps dans la mise en page.</li>\n <li>Assurer une cohérence visuelle sur l’ensemble du site.</li>\n <li>Faciliter le responsive design.</li>\n </ul>\n <strong>Exemples :</strong>\n <ul>\n <li><strong>Bootstrap</strong> : propose des composants (boutons, formulaires, grilles) et un système de grille responsive.</li>\n <li><strong>Tailwind CSS</strong> : approche utilitaire avec des classes très spécifiques pour chaque propriété CSS.</li>\n </ul>",
  "exemple": "Exemple avec Bootstrap :\n <head>\n   &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n </head>\n <body>\n   <div class=\"container\">\n     <h1 class=\"text-primary\">Bienvenue</h1>\n     <button class=\"btn btn-success\">Valider</button>\n   </div>\n </body>\n\n Exemple avec Tailwind :\n <head>\n   <script src=\"https://cdn.tailwindcss.com\"></script>\n </head>\n <body>\n   <div class=\"p-4 max-w-md mx-auto\">\n     <h1 class=\"text-2xl text-blue-600\">Bienvenue</h1>\n     <button class=\"bg-green-500 text-white px-4 py-2 rounded\">Valider</button>\n   </div>\n </body>",
  "sources": "Sources Web\n <ul>\n <li><a href=\"https://getbootstrap.com/\">Bootstrap – Documentation</a></li>\n <li><a href=\"https://tailwindcss.com/docs\">Tailwind CSS – Documentation</a></li>\n </ul>",
  "infos_supplementaires": "Bonnes pratiques :\n <ul>\n <li>Lire la documentation officielle pour comprendre les classes et composants disponibles.</li>\n <li>Ne pas surcharger inutilement les classes avec du CSS personnalisé.</li>\n <li>Utiliser les systèmes de grille pour assurer un bon comportement responsive.</li>\n </ul>"
},
{
  "fichier": "fiche-023",
  "competence": "Compétence : Créer dynamiquement un élément DOM et y ajouter un événement personnalisé",
  "objectif": "Objectif\n Savoir générer un élément HTML avec JavaScript, l’insérer dans le DOM, et lui associer un comportement interactif via un événement.",
  "theorie": "Théorie\n JavaScript permet de créer des éléments HTML à la volée avec <code>document.createElement()</code>, de les configurer (contenu, classes, attributs), puis de les insérer dans le DOM avec <code>appendChild()</code> ou <code>append()</code>.\n <br>Un événement personnalisé peut être ajouté avec <code>addEventListener()</code> pour déclencher une action (ex. : clic, survol, etc.).\n <br>Cette technique est utile pour générer du contenu dynamique (ex. : notifications, cartes, messages, etc.).",
  "exemple": "Exemple\n <button id=\"ajouter\">Ajouter un message</button>\n <div id=\"zone\"></div>\n\n <script>\n   document.getElementById(\"ajouter\").addEventListener(\"click\", function() {\n     const message = document.createElement(\"p\");\n     message.textContent = \"Message ajouté dynamiquement !\";\n     message.style.color = \"green\";\n     message.addEventListener(\"click\", function() {\n       alert(\"Vous avez cliqué sur le message !\");\n     });\n     document.getElementById(\"zone\").appendChild(message);\n   });\n </script>",
  "sources": "Sources Web\n <ul>\n <li><a href=\"https://developer.mozilla.org/fr/docs/Web/API/Document/createElement\">MDN – createElement</a></li>\n <li><a href=\"https://developer.mozilla.org/fr/docs/Web/API/EventTarget/addEventListener\">MDN – addEventListener</a></li>\n </ul>",
  "infos_supplementaires": "Bonnes pratiques :\n <ul>\n <li>Créer les éléments dans une fonction dédiée pour plus de clarté.</li>\n <li>Ajouter des classes CSS pour styliser les éléments dynamiques.</li>\n <li>Utiliser <code>event delegation</code> si de nombreux éléments sont ajoutés dynamiquement.</li>\n </ul>"
},
{
  "fichier": "fiche-024",
  "competence": "Compétence : Détecter plusieurs erreurs dans une portion de code complexe",
  "objectif": "Objectif\n Être capable d’analyser un bloc de code HTML, CSS ou JavaScript complexe pour y repérer plusieurs erreurs de logique, de syntaxe ou de structure.",
  "theorie": "Théorie\n Dans un code complexe, plusieurs types d’erreurs peuvent coexister :\n <ul>\n <li><strong>Erreurs de syntaxe</strong> : fautes de frappe, balises non fermées, parenthèses manquantes.</li>\n <li><strong>Erreurs de logique</strong> : conditions incorrectes, boucles infinies, mauvais appels de fonction.</li>\n <li><strong>Erreurs de structure</strong> : mauvaise hiérarchie HTML, sélecteurs CSS mal ciblés, événements mal attachés.</li>\n </ul>\n Pour les détecter efficacement :\n <ul>\n <li>Lire le code ligne par ligne avec attention.</li>\n <li>Utiliser les outils de développement (console, inspecteur, debugger).</li>\n <li>Tester les fonctionnalités une par une.</li>\n <li>Ajouter des <code>console.log()</code> pour suivre l’exécution du code.</li>\n </ul>",
  "exemple": "Exemple\n Code avec erreurs :\n <script>\n   function afficherMessage() {\n     const message = document.getElementByID(\"msg\"); // Erreur : getElementById mal orthographié\n     message.innerText = \"Bonjour\";\n   }\n   afficherMessage;\n </script>\n\n <p id=\"msg\"></p>\n\n Erreurs détectées :\n <ul>\n <li><code>getElementByID</code> → doit être <code>getElementById</code> (sensible à la casse).</li>\n <li><code>afficherMessage;</code> → doit être <code>afficherMessage();</code> pour exécuter la fonction.</li>\n </ul>",
  "sources": "Sources Web\n <ul>\n <li><a href=\"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide\">MDN – Guide JavaScript</a></li>\n <li><a href=\"https://validator.w3.org/\">W3C – Validateur HTML</a></li>\n </ul>",
  "infos_supplementaires": "Bonnes pratiques :\n <ul>\n <li>Utiliser un éditeur avec coloration syntaxique et détection d’erreurs (ex. : VS Code).</li>\n <li>Corriger les erreurs une par une en testant à chaque étape.</li>\n <li>Demander une relecture ou utiliser un linter pour repérer les erreurs invisibles.</li>\n </ul>"
},
{
  "fichier": "fiche-025",
  "competence": "Compétence : Rechercher efficacement dans la documentation d’une bibliothèque tierce",
  "objectif": "Objectif\n Savoir naviguer dans la documentation officielle d’une bibliothèque (ex. : Bootstrap, jQuery, Chart.js) pour comprendre son fonctionnement et trouver des exemples d’utilisation.",
  "theorie": "Théorie\n Les bibliothèques tierces (CSS ou JavaScript) sont accompagnées d’une documentation officielle qui décrit :\n <ul>\n <li>Les composants ou fonctions disponibles</li>\n <li>Leur syntaxe et leurs paramètres</li>\n <li>Des exemples d’utilisation</li>\n <li>Les bonnes pratiques et limitations</li>\n </ul>\n Pour rechercher efficacement :\n <ul>\n <li>Utiliser la barre de recherche intégrée au site de documentation.</li>\n <li>Consulter les sections \"Getting Started\", \"Examples\", ou \"API Reference\".</li>\n <li>Utiliser des mots-clés précis (ex. : \"modal Bootstrap\", \"chart options Chart.js\").</li>\n </ul>",
  "exemple": "Exemple\n Objectif : intégrer une modale avec Bootstrap.\n Étapes :\n <ol>\n <li>Aller sur <a href=\"https://getbootstrap.com\">getbootstrap.com</a></li>\n <li>Rechercher \"modal\" dans la barre de recherche.</li>\n <li>Lire la section \"Modal\" dans les composants.</li>\n <li>Copier un exemple de code HTML/JS et l’adapter à son projet.</li>\n </ol>",
  "sources": "Sources Web\n <ul>\n <li><a href=\"https://getbootstrap.com/docs/\">Bootstrap – Documentation</a></li>\n <li><a href=\"https://tailwindcss.com/docs\">Tailwind CSS – Documentation</a></li>\n <li><a href=\"https://jquery.com/\">jQuery – Documentation</a></li>\n <li><a href=\"https://www.chartjs.org/docs/\">Chart.js – Documentation</a></li>\n </ul>",
  "infos_supplementaires": "Bonnes pratiques :\n <ul>\n <li>Favoriser la documentation officielle plutôt que des forums pour des informations fiables.</li>\n <li>Tester les exemples dans un environnement isolé (CodePen, JSFiddle, etc.).</li>\n <li>Vérifier la version de la bibliothèque utilisée pour éviter les erreurs de compatibilité.</li>\n </ul>"
},
{
  "fichier": "fiche-026",
  "competence": "Compétence : Ajouter du code CSS à un élément HTML",
  "objectif": "Objectif\n Savoir appliquer du style à un élément HTML en utilisant du code CSS.",
  "theorie": "Théorie\n Le CSS (Cascading Style Sheets) permet de styliser les éléments HTML d'une page web. Il existe plusieurs façons d'ajouter du CSS à un élément HTML :\n <ul>\n <li><strong>En ligne (inline)</strong> : en utilisant l'attribut <code>style</code> directement dans la balise HTML.</li>\n <li><strong>Interne</strong> : en plaçant le CSS dans une balise <code>&lt;style&gt;</code> dans le <code>&lt;head&gt;</code> du document HTML.</li>\n <li><strong>Externe</strong> : en liant un fichier CSS externe avec la balise <code>&lt;link&gt;</code>.</li>\n </ul>\n L'ajout de CSS en ligne est utile pour des styles rapides ou spécifiques, mais il est recommandé d'utiliser des feuilles de style internes ou externes pour une meilleure organisation et maintenabilité.",
  "exemple": "Exemple\n Voici un exemple d'ajout de CSS en ligne à un élément HTML :\n \n <code>\n &lt;p style=\"color: blue; font-size: 18px;\"&gt;Ce texte est en bleu et en taille 18px.&lt;/p&gt;\n </code>\n \n Exemple avec une feuille de style interne :\n <code>\n &lt;head&gt;\n   &lt;style&gt;\n     p {\n       color: green;\n       font-weight: bold;\n     }\n   &lt;/style&gt;\n &lt;/head&gt;\n &lt;body&gt;\n   &lt;p&gt;Ce texte est vert et en gras.&lt;/p&gt;\n &lt;/body&gt;\n </code>",
  "sources": "Sources Web\n <ul>\n <li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS\">Documentation CSS sur MDN</a></li>\n <li><a href=\"https://www.w3schools.com/css/\">Tutoriels CSS sur W3Schools</a></li>\n </ul>",
  "infos_supplementaires": "Bonnes pratiques :\n <ul>\n <li>Évitez d'utiliser trop de styles en ligne pour garder un code propre.</li>\n <li>Utilisez des classes CSS pour réutiliser les styles sur plusieurs éléments.</li>\n </ul>"
},
{
  "fichier": "fiche-027",
  "competence": "Compétence : Respecter les standards W3C et valider son code",
  "objectif": "Objectif\n Comprendre l'importance des standards du W3C et savoir comment valider son code HTML et CSS.",
  "theorie": "Théorie\n Le W3C (World Wide Web Consortium) est l'organisme international qui définit les standards du web. Respecter ces standards garantit :\n <ul>\n <li>Une meilleure compatibilité entre navigateurs.</li>\n <li>Une accessibilité accrue pour tous les utilisateurs.</li>\n <li>Une base solide pour le référencement (SEO).</li>\n <li>Un code plus maintenable et évolutif.</li>\n </ul>\n La validation du code permet de détecter les erreurs de syntaxe et les mauvaises pratiques. Elle peut être effectuée via des outils en ligne proposés par le W3C.",
  "exemple": "Exemple\n Pour valider un document HTML :\n <ul>\n <li>Accédez au <a href=\"https://validator.w3.org/\">W3C Markup Validation Service</a>.</li>\n <li>Collez l'URL de votre page ou téléversez votre fichier HTML.</li>\n <li>Analysez les erreurs et avertissements, puis corrigez-les.</li>\n </ul>\n Pour valider un fichier CSS :\n <ul>\n <li>Utilisez le <a href=\"https://jigsaw.w3.org/css-validator/\">W3C CSS Validation Service</a>.</li>\n <li>Procédez de la même manière que pour le HTML.</li>\n </ul>",
  "sources": "Sources Web\n <ul>\n <li><a href=\"https://www.w3.org/\">Site officiel du W3C</a></li>\n <li><a href=\"https://validator.w3.org/\">Validateur HTML du W3C</a></li>\n <li><a href=\"https://jigsaw.w3.org/css-validator/\">Validateur CSS du W3C</a></li>\n </ul>",
  "infos_supplementaires": "Conseils pratiques :\n <ul>\n <li>Validez régulièrement votre code pendant le développement.</li>\n <li>Utilisez des éditeurs de code avec des extensions de validation automatique.</li>\n <li>Respectez la sémantique HTML pour améliorer l'accessibilité et le SEO.</li>\n </ul>"
},
{
  "fichier": "fiche-028",
  "competence": "Compétence : Connaître les bases du SEO technique (balises meta, structure sémantique)",
  "objectif": "Objectif\n Comprendre les fondamentaux du SEO technique pour améliorer la visibilité d’un site web dans les moteurs de recherche.",
  "theorie": "Théorie\n Le SEO (Search Engine Optimization) technique regroupe les pratiques qui permettent aux moteurs de recherche de mieux explorer, comprendre et indexer un site web. Les bases incluent :\n <ul>\n <li><strong>Les balises meta</strong> : elles fournissent des informations aux moteurs de recherche. Exemples :\n   <ul>\n     <li><code>&lt;meta charset=\"UTF-8\"&gt;</code> : définit l'encodage.</li>\n     <li><code>&lt;meta name=\"description\" content=\"Description de la page\"&gt;</code> : résumé affiché dans les résultats de recherche.</li>\n     <li><code>&lt;title&gt;Titre de la page&lt;/title&gt;</code> : titre affiché dans l’onglet du navigateur et dans les résultats de recherche.</li>\n   </ul>\n </li>\n <li><strong>La structure sémantique</strong> : utiliser les balises HTML5 appropriées (<code>&lt;header&gt;</code>, <code>&lt;main&gt;</code>, <code>&lt;article&gt;</code>, <code>&lt;section&gt;</code>, <code>&lt;footer&gt;</code>) pour organiser le contenu de manière logique et compréhensible.</li>\n <li><strong>Les attributs alt</strong> sur les images : ils améliorent l’accessibilité et le référencement des images.</li>\n <li><strong>Les URLs lisibles</strong> : privilégier des URLs courtes et descriptives.</li>\n </ul>",
  "exemple": "Exemple\n Voici un exemple de structure HTML optimisée pour le SEO :\n <code>\n &lt;!DOCTYPE html&gt;\n &lt;html lang=\"fr\"&gt;\n &lt;head&gt;\n   &lt;meta charset=\"UTF-8\"&gt;\n   &lt;meta name=\"description\" content=\"Apprenez les bases du SEO technique.\"&gt;\n   &lt;title&gt;Introduction au SEO technique&lt;/title&gt;\n &lt;/head&gt;\n &lt;body&gt;\n   &lt;header&gt;\n     &lt;h1&gt;Bienvenue sur notre site&lt;/h1&gt;\n   &lt;/header&gt;\n   &lt;main&gt;\n     &lt;article&gt;\n       &lt;h2&gt;Qu’est-ce que le SEO technique ?&lt;/h2&gt;\n       &lt;p&gt;Le SEO technique aide les moteurs de recherche à comprendre votre site.&lt;/p&gt;\n     &lt;/article&gt;\n   &lt;/main&gt;\n   &lt;footer&gt;\n     &lt;p&gt;© 2025 MonSiteWeb&lt;/p&gt;\n   &lt;/footer&gt;\n &lt;/body&gt;\n &lt;/html&gt;\n </code>",
  "sources": "Sources Web\n <ul>\n <li><a href=\"https://developer.mozilla.org/fr/docs/Web/HTML/Element/meta\">MDN – Balises meta</a></li>\n <li><a href=\"https://moz.com/learn/seo/what-is-seo\">Moz – Introduction au SEO</a></li>\n <li><a href=\"https://www.searchenginejournal.com/technical-seo/\">Search Engine Journal – Technical SEO</a></li>\n </ul>",
  "infos_supplementaires": "Bonnes pratiques :\n <ul>\n <li>Utilisez un seul <code>&lt;h1&gt;</code> par page pour le titre principal.</li>\n <li>Évitez les contenus dupliqués.</li>\n <li>Testez votre site avec Google Search Console et PageSpeed Insights.</li>\n </ul>"
},
{
  "fichier": "fiche-029",
  "competence": "Compétence : Utiliser Git pour versionner son code",
  "objectif": "Objectif\n Comprendre les principes du versionnement avec Git et savoir l'utiliser pour suivre les modifications du code.",
  "theorie": "Théorie\n Git est un système de contrôle de version distribué qui permet de suivre l’évolution d’un projet, collaborer efficacement et revenir à des versions antérieures du code. Il est utilisé en ligne de commande ou via des interfaces graphiques comme GitHub Desktop.\n <ul>\n <li><strong>Initialiser un dépôt</strong> : <code>git init</code></li>\n <li><strong>Ajouter des fichiers</strong> : <code>git add nom_du_fichier</code></li>\n <li><strong>Enregistrer un changement</strong> : <code>git commit -m \"Message de commit\"</code></li>\n <li><strong>Voir l’historique</strong> : <code>git log</code></li>\n <li><strong>Travailler avec des branches</strong> : <code>git branch</code>, <code>git checkout -b nom_de_branche</code></li>\n <li><strong>Collaborer via GitHub</strong> : <code>git push</code>, <code>git pull</code>, <code>git clone</code></li>\n </ul>\n Git permet aussi de gérer les conflits, fusionner des branches et suivre les contributions dans un projet collaboratif.",
  "exemple": "Exemple\n Voici un exemple de workflow Git simple :\n <code>\n git init\n git add index.html\n git commit -m \"Ajout du fichier HTML principal\"\n git branch develop\n git checkout develop\n git add style.css\n git commit -m \"Ajout du fichier CSS\"\n git checkout main\n git merge develop\n </code>",
  "sources": "Sources Web\n <ul>\n <li><a href=\"https://git-scm.com/doc\">Documentation officielle de Git</a></li>\n <li><a href=\"https://learngitbranching.js.org/\">Learn Git Branching (visualisation interactive)</a></li>\n <li><a href=\"https://docs.github.com/fr\">Documentation GitHub</a></li>\n </ul>",
  "infos_supplementaires": "Conseils pratiques :\n <ul>\n <li>Commitez souvent avec des messages clairs et descriptifs.</li>\n <li>Utilisez des branches pour séparer les fonctionnalités ou les corrections.</li>\n <li>Ajoutez un fichier <code>.gitignore</code> pour exclure les fichiers inutiles du suivi.</li>\n </ul>"
}

]