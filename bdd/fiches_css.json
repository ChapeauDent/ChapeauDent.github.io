[
    {
  "fichier": "fiche-001",
  "competence": "Compétence : Comprendre l’usage principal de CSS (séparation du style et du contenu)",
  "objectif": "<h2>Objectif</h2>\n<p>Comprendre le rôle fondamental de CSS dans la séparation du style et du contenu d'une page web.</p>",
  "theorie": "<h2>Théorie</h2>\n<p>CSS (Cascading Style Sheets) est un langage utilisé pour décrire la présentation d’un document HTML. Il permet de définir l’apparence visuelle des éléments HTML sans modifier leur structure ou leur contenu.</p>\n<p>La séparation du style et du contenu est une bonne pratique en développement web. Elle consiste à :</p>\n<ul>\n<li>Utiliser HTML pour structurer et organiser le contenu (titres, paragraphes, images, etc.).</li>\n<li>Utiliser CSS pour définir l’apparence (couleurs, polices, marges, alignements, etc.).</li>\n</ul>\n<p>Cette séparation facilite la maintenance, améliore la réutilisabilité du code, et permet une meilleure accessibilité et adaptabilité du site (notamment pour le responsive design).</p>",
  "exemple": "<h2>Exemple</h2>\n<p>Voici un exemple simple montrant la séparation entre HTML et CSS :</p>\n<pre><code>\n<!-- Fichier HTML -->\n<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Exemple CSS</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <h1>Bienvenue</h1>\n    <p>Ceci est un paragraphe stylisé avec CSS.</p>\n</body>\n</html>\n\n/* Fichier CSS (style.css) */\nh1 {\n    color: blue;\n    font-family: Arial, sans-serif;\n}\np {\n    background-color: #f0f0f0;\n    padding: 10px;\n}\n</code></pre>",
  "sources": "<h2>Sources Web</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS\">Guide CSS de MDN</a></li>\n<li><a href=\"https://www.w3schools.com/css/\">Tutoriels CSS de W3Schools</a></li>\n<li><a href=\"https://css-tricks.com/\">CSS-Tricks</a></li>\n</ul>",
  "infos_supplementaires": ""
},
{
  "fichier": "fiche-002",
  "competence": "Compétence : Connaître la structure d’une règle CSS (sélecteur { propriété: valeur; })",
  "objectif": "<h2>Objectif</h2>\n<p>Comprendre la syntaxe de base d'une règle CSS et savoir comment l'utiliser pour styliser des éléments HTML.</p>",
  "theorie": "<h2>Théorie</h2>\n<p>Une règle CSS est composée de trois parties principales :</p>\n<ul>\n<li><strong>Le sélecteur</strong> : il désigne l’élément HTML auquel le style sera appliqué (ex : <code>p</code>, <code>.classe</code>, <code>#id</code>).</li>\n<li><strong>La propriété</strong> : elle définit l’aspect à modifier (ex : <code>color</code>, <code>font-size</code>).</li>\n<li><strong>La valeur</strong> : elle précise comment la propriété doit être appliquée (ex : <code>red</code>, <code>16px</code>).</li>\n</ul>\n<p>La syntaxe générale est :</p>\n<pre><code>\nsélecteur {\n    propriété: valeur;\n}\n</code></pre>\n<p>Chaque règle se termine par un point-virgule <code>;</code>, et les propriétés sont placées entre accolades <code>{ }</code>.</p>",
  "exemple": "<h2>Exemple</h2>\n<p>Voici une règle CSS qui applique une couleur rouge au texte des paragraphes :</p>\n<pre><code>\np {\n    color: red;\n}\n</code></pre>\n<p>Dans cet exemple :</p>\n<ul>\n<li><code>p</code> est le sélecteur (il cible tous les paragraphes).</li>\n<li><code>color</code> est la propriété.</li>\n<li><code>red</code> est la valeur appliquée à la propriété.</li>\n</ul>",
  "sources": "<h2>Sources Web</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/Syntax\">Syntaxe CSS sur MDN</a></li>\n<li><a href=\"https://www.w3schools.com/css/css_syntax.asp\">CSS Syntax - W3Schools</a></li>\n</ul>",
  "infos_supplementaires": ""
},
{
  "fichier": "fiche-003",
  "competence": "Compétence : Changer la police d’un texte (font-family)",
  "objectif": "<h2>Objectif</h2>\n<p>Apprendre à modifier la police d’un texte en utilisant la propriété CSS <code>font-family</code>.</p>",
  "theorie": "<h2>Théorie</h2>\n<p>La propriété <code>font-family</code> permet de définir la police de caractères utilisée pour afficher un texte. Elle accepte une ou plusieurs valeurs, séparées par des virgules. Si la première police n’est pas disponible sur l’appareil de l’utilisateur, le navigateur essaiera la suivante.</p>\n<p>Il est recommandé de toujours inclure une police de secours générique (comme <code>sans-serif</code>, <code>serif</code>, ou <code>monospace</code>).</p>\n<p>Exemples de familles de polices :</p>\n<ul>\n<li><code>Arial, sans-serif</code></li>\n<li><code>'Times New Roman', serif</code></li>\n<li><code>'Courier New', monospace</code></li>\n</ul>",
  "exemple": "<h2>Exemple</h2>\n<p>Voici un exemple de règle CSS qui applique la police Arial à tous les paragraphes :</p>\n<pre><code>\np {\n    font-family: Arial, sans-serif;\n}\n</code></pre>\n<p>Si Arial n’est pas disponible, le navigateur utilisera une autre police sans empattement (<code>sans-serif</code>).</p>",
  "sources": "<h2>Sources Web</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/font-family\">font-family sur MDN</a></li>\n<li><a href=\"https://www.w3schools.com/cssref/pr_font_font-family.asp\">font-family - W3Schools</a></li>\n<li><a href=\"https://fonts.google.com/\">Google Fonts</a></li>\n</ul>",
  "infos_supplementaires": "<p>Pour utiliser des polices personnalisées, vous pouvez intégrer Google Fonts ou utiliser <code>@font-face</code>.</p>"
},
{
  "fichier": "fiche-004",
  "competence": "Compétence : Modifier la couleur de fond d’un élément (background-color)",
  "objectif": "<h2>Objectif</h2>\n<p>Apprendre à changer la couleur de fond d’un élément HTML à l’aide de la propriété CSS <code>background-color</code>.</p>",
  "theorie": "<h2>Théorie</h2>\n<p>La propriété <code>background-color</code> permet de définir la couleur de fond d’un élément HTML. Elle peut être utilisée avec différents formats de couleur :</p>\n<ul>\n<li>Nom de couleur : <code>red</code>, <code>blue</code>, <code>green</code>, etc.</li>\n<li>Code hexadécimal : <code>#ff0000</code>, <code>#00ff00</code>, etc.</li>\n<li>Valeurs RGB : <code>rgb(255, 0, 0)</code></li>\n<li>Valeurs HSL : <code>hsl(0, 100%, 50%)</code></li>\n</ul>\n<p>Cette propriété est très utilisée pour améliorer la lisibilité, mettre en évidence des éléments ou créer des effets visuels.</p>",
  "exemple": "<h2>Exemple</h2>\n<p>Voici une règle CSS qui applique une couleur de fond jaune à tous les paragraphes :</p>\n<pre><code>\np {\n    background-color: yellow;\n}\n</code></pre>\n<p>Autre exemple avec une couleur personnalisée en hexadécimal :</p>\n<pre><code>\ndiv {\n    background-color: #f2f2f2;\n}\n</code></pre>",
  "sources": "<h2>Sources Web</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/background-color\">background-color sur MDN</a></li>\n<li><a href=\"https://www.w3schools.com/cssref/pr_background-color.asp\">background-color - W3Schools</a></li>\n<li><a href=\"https://htmlcolorcodes.com/\">HTML Color Codes</a></li>\n</ul>",
  "infos_supplementaires": "<p>Il est possible d’utiliser <code>transparent</code> comme valeur pour rendre le fond invisible.</p>"
},
{
  "fichier": "fiche-005",
  "competence": "Compétence : Sélectionner un élément par son nom d’étiquette (ex : p, h1, div)",
  "objectif": "<h2>Objectif</h2>\n<p>Savoir cibler des éléments HTML en utilisant leur nom de balise (ou étiquette) dans une règle CSS.</p>",
  "theorie": "<h2>Théorie</h2>\n<p>En CSS, un <strong>sélecteur de type</strong> permet de cibler tous les éléments d’un certain type HTML. Il s’écrit simplement en indiquant le nom de la balise sans point ni dièse.</p>\n<p>Par exemple :</p>\n<ul>\n<li><code>p</code> cible tous les paragraphes</li>\n<li><code>h1</code> cible tous les titres de niveau 1</li>\n<li><code>div</code> cible toutes les divisions</li>\n</ul>\n<p>Ce type de sélecteur est utile pour appliquer un style global à tous les éléments d’un même type.</p>",
  "exemple": "<h2>Exemple</h2>\n<p>Voici une règle CSS qui applique une couleur bleue à tous les titres <code>h1</code> :</p>\n<pre><code>\nh1 {\n    color: blue;\n}\n</code></pre>\n<p>Et une autre qui ajoute une marge aux paragraphes :</p>\n<pre><code>\np {\n    margin-bottom: 15px;\n}\n</code></pre>",
  "sources": "<h2>Sources Web</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/Type_selectors\">Sélecteurs de type - MDN</a></li>\n<li><a href=\"https://www.w3schools.com/css/css_selectors.asp\">CSS Selectors - W3Schools</a></li>\n</ul>",
  "infos_supplementaires": "<p>Les sélecteurs de type peuvent être combinés avec d'autres sélecteurs pour plus de précision (ex : <code>div p</code> cible les paragraphes à l’intérieur des divs).</p>"
},
{
  "fichier": "fiche-006",
  "competence": "Compétence : Comprendre la différence entre HTML et CSS",
  "objectif": "<h2>Objectif</h2>\n<p>Faire la distinction entre le rôle de HTML et celui de CSS dans la création d’une page web.</p>",
  "theorie": "<h2>Théorie</h2>\n<p>HTML (HyperText Markup Language) et CSS (Cascading Style Sheets) sont deux langages complémentaires utilisés dans le développement web :</p>\n<ul>\n<li><strong>HTML</strong> sert à structurer le contenu d’une page web. Il définit les éléments comme les titres, paragraphes, images, liens, listes, etc.</li>\n<li><strong>CSS</strong> sert à styliser ce contenu. Il permet de modifier l’apparence des éléments HTML : couleurs, polices, tailles, marges, positionnement, etc.</li>\n</ul>\n<p>En résumé : <strong>HTML = contenu</strong>, <strong>CSS = présentation</strong>.</p>",
  "exemple": "<h2>Exemple</h2>\n<p>Voici un exemple simple montrant l’utilisation conjointe de HTML et CSS :</p>\n<pre><code>\n<!-- HTML -->\n<p class=\"important\">Ceci est un paragraphe important.</p>\n\n/* CSS */\n.important {\n    color: red;\n    font-weight: bold;\n}\n</code></pre>\n<p>Le HTML définit le contenu, tandis que le CSS applique un style à ce contenu.</p>",
  "sources": "<h2>Sources Web</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Learn/Getting_started_with_the_web/HTML_basics\">HTML de base - MDN</a></li>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Learn/Getting_started_with_the_web/CSS_basics\">CSS de base - MDN</a></li>\n<li><a href=\"https://www.w3schools.com/html/html_css.asp\">HTML et CSS - W3Schools</a></li>\n</ul>",
  "infos_supplementaires": "<p>Il est recommandé de toujours séparer le HTML et le CSS dans des fichiers distincts pour une meilleure organisation du code.</p>"
},
{
  "fichier": "fiche-007",
  "competence": "Compétence : Appliquer du CSS en ligne, interne et externe",
  "objectif": "<h2>Objectif</h2>\n<p>Découvrir les trois méthodes principales pour appliquer du CSS à une page HTML : en ligne, en interne et en externe.</p>",
  "theorie": "<h2>Théorie</h2>\n<p>Il existe trois façons d’ajouter du CSS à une page web :</p>\n<ul>\n<li><strong>CSS en ligne</strong> : le style est appliqué directement dans l’attribut <code>style</code> d’un élément HTML. <br><em>Avantage :</em> rapide pour des modifications ponctuelles. <br><em>Inconvénient :</em> difficile à maintenir.</li>\n<li><strong>CSS interne</strong> : les règles CSS sont placées dans une balise <code>&lt;style&gt;</code> à l’intérieur de l’en-tête HTML. <br><em>Avantage :</em> utile pour des styles spécifiques à une seule page. <br><em>Inconvénient :</em> le style est mélangé au contenu.</li>\n<li><strong>CSS externe</strong> : les règles CSS sont placées dans un fichier séparé (ex : <code>style.css</code>) et liées à la page HTML via une balise <code>&lt;link&gt;</code>. <br><em>Avantage :</em> meilleure organisation, réutilisable sur plusieurs pages. <br><em>Inconvénient :</em> nécessite un fichier supplémentaire.</li>\n</ul>",
  "exemple": "<h2>Exemple</h2>\n<p><strong>CSS en ligne :</strong></p>\n<pre><code>\n<p style=\"color: red;\">Texte rouge</p>\n</code></pre>\n<p><strong>CSS interne :</strong></p>\n<pre><code>\n<head>\n  &lt;style&gt;\n    p { color: blue; }\n  &lt;/style&gt;\n</head>\n<body>\n  <p>Texte bleu</p>\n</body>\n</code></pre>\n<p><strong>CSS externe :</strong></p>\n<pre><code>\n<!-- HTML -->\n<head>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n\n<!-- style.css -->\np {\n  color: green;\n}\n</code></pre>",
  "sources": "<h2>Sources Web</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Learn/CSS/First_steps/How_CSS_is_structured\">Comment le CSS est structuré - MDN</a></li>\n<li><a href=\"https://www.w3schools.com/css/css_howto.asp\">How to Add CSS - W3Schools</a></li>\n</ul>",
  "infos_supplementaires": "<p>Il est recommandé d’utiliser le CSS externe pour les projets professionnels ou de grande taille.</p>"
},
{
  "fichier": "fiche-008",
  "competence": "Compétence : Utiliser l’outil Inspecteur du navigateur pour tester/modifier du CSS",
  "objectif": "<h2>Objectif</h2>\n<p>Apprendre à utiliser l’inspecteur intégré aux navigateurs pour examiner, tester et modifier le CSS d’une page web en temps réel.</p>",
  "theorie": "<h2>Théorie</h2>\n<p>L’inspecteur est un outil de développement intégré dans les navigateurs modernes (Chrome, Firefox, Edge, etc.). Il permet :</p>\n<ul>\n<li>D’examiner la structure HTML d’une page.</li>\n<li>De visualiser et modifier les règles CSS appliquées à chaque élément.</li>\n<li>De tester des styles en direct sans modifier les fichiers sources.</li>\n<li>De repérer les erreurs ou conflits de style.</li>\n</ul>\n<p>Pour ouvrir l’inspecteur :</p>\n<ul>\n<li><strong>Windows/Linux :</strong> clic droit sur un élément &rarr; « Inspecter » ou touche <code>F12</code></li>\n<li><strong>Mac :</strong> clic droit &rarr; « Inspecter » ou <code>Cmd + Option + I</code></li>\n</ul>",
  "exemple": "<h2>Exemple</h2>\n<p>En inspectant un paragraphe, vous pouvez :</p>\n<ul>\n<li>Voir les règles CSS appliquées dans le panneau « Styles ».</li>\n<li>Modifier une propriété (ex : <code>color</code>) et observer le changement en direct.</li>\n<li>Ajouter une nouvelle règle temporaire (ex : <code>font-size: 20px;</code>).</li>\n</ul>\n<p>Cela permet de tester rapidement des idées de design ou de corriger des problèmes visuels.</p>",
  "sources": "<h2>Sources Web</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Outils/Inspecteur\">Inspecteur - MDN</a></li>\n<li><a href=\"https://web.dev/learn/css/devtools/\">Utiliser les DevTools pour CSS - web.dev</a></li>\n<li><a href=\"https://www.w3schools.com/css/css_inspect.asp\">Inspecter CSS - W3Schools</a></li>\n</ul>",
  "infos_supplementaires": "<p>L’inspecteur est un outil essentiel pour les développeurs front-end. Il ne modifie pas les fichiers sources, mais permet de tester des modifications en direct.</p>"
},
{
  "fichier": "fiche-009",
  "competence": "Compétence : Changer la taille (font-size) et la couleur (color) de la police",
  "objectif": "<h2>Objectif</h2>\n<p>Apprendre à modifier la taille et la couleur du texte à l’aide des propriétés CSS <code>font-size</code> et <code>color</code>.</p>",
  "theorie": "<h2>Théorie</h2>\n<p>Deux propriétés CSS permettent de contrôler l’apparence du texte :</p>\n<ul>\n<li><strong><code>font-size</code></strong> : définit la taille de la police. Elle peut être exprimée en pixels (<code>px</code>), en em (<code>em</code>), en pourcentage (<code>%</code>), etc.</li>\n<li><strong><code>color</code></strong> : définit la couleur du texte. Elle accepte des noms de couleurs, des codes hexadécimaux, des valeurs RGB ou HSL.</li>\n</ul>\n<p>Ces propriétés sont souvent utilisées ensemble pour améliorer la lisibilité et l’esthétique du contenu.</p>",
  "exemple": "<h2>Exemple</h2>\n<p>Voici une règle CSS qui applique une taille de 20 pixels et une couleur verte au texte des paragraphes :</p>\n<pre><code>\np {\n    font-size: 20px;\n    color: green;\n}\n</code></pre>\n<p>Autre exemple avec des unités relatives et une couleur en hexadécimal :</p>\n<pre><code>\nh1 {\n    font-size: 2em;\n    color: #3366cc;\n}\n</code></pre>",
  "sources": "<h2>Sources Web</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/font-size\">font-size - MDN</a></li>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/color\">color - MDN</a></li>\n<li><a href=\"https://www.w3schools.com/css/css_font.asp\">CSS Fonts - W3Schools</a></li>\n</ul>",
  "infos_supplementaires": "<p>Utiliser des unités relatives comme <code>em</code> ou <code>rem</code> permet une meilleure adaptabilité sur différents écrans.</p>"
},
{
  "fichier": "fiche-010",
  "competence": "Compétence : Paramétrer une image de fond ou un dégradé (background-image, linear-gradient)",
  "objectif": "<h2>Objectif</h2>\n<p>Apprendre à utiliser la propriété <code>background-image</code> pour appliquer une image ou un dégradé en fond d’un élément HTML.</p>",
  "theorie": "<h2>Théorie</h2>\n<p>La propriété <code>background-image</code> permet d’ajouter une image ou un dégradé en arrière-plan d’un élément. Elle accepte :</p>\n<ul>\n<li>Une URL d’image : <code>url('image.jpg')</code></li>\n<li>Un dégradé CSS : <code>linear-gradient()</code> ou <code>radial-gradient()</code></li>\n</ul>\n<p>Il est possible de combiner plusieurs arrière-plans, de les positionner, répéter ou redimensionner avec d’autres propriétés comme <code>background-repeat</code>, <code>background-size</code>, <code>background-position</code>.</p>",
  "exemple": "<h2>Exemple</h2>\n<p><strong>Image de fond :</strong></p>\n<pre><code>\ndiv {\n    background-image: url('fond.jpg');\n    background-size: cover;\n    background-repeat: no-repeat;\n}\n</code></pre>\n<p><strong>Dégradé linéaire :</strong></p>\n<pre><code>\nheader {\n    background-image: linear-gradient(to right, #ff7e5f, #feb47b);\n}\n</code></pre>",
  "sources": "<h2>Sources Web</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/background-image\">background-image - MDN</a></li>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/linear-gradient\">linear-gradient - MDN</a></li>\n<li><a href=\"https://www.w3schools.com/css/css_background.asp\">CSS Backgrounds - W3Schools</a></li>\n</ul>",
  "infos_supplementaires": "<p>Les dégradés CSS sont très utiles pour créer des effets visuels sans utiliser d’images externes, ce qui améliore les performances.</p>"
},
{
  "fichier": "fiche-011",
  "competence": "Compétence : Ajouter une bordure à un élément (border)",
  "objectif": "<h2>Objectif</h2>\n<p>Apprendre à ajouter et personnaliser une bordure autour d’un élément HTML à l’aide de la propriété CSS <code>border</code>.</p>",
  "theorie": "<h2>Théorie</h2>\n<p>La propriété <code>border</code> permet d’ajouter une bordure autour d’un élément. Elle peut être définie de manière complète ou en utilisant des sous-propriétés :</p>\n<ul>\n<li><code>border-width</code> : épaisseur de la bordure</li>\n<li><code>border-style</code> : style de la bordure (solid, dashed, dotted, etc.)</li>\n<li><code>border-color</code> : couleur de la bordure</li>\n</ul>\n<p>Il est aussi possible d’utiliser la syntaxe raccourcie :</p>\n<pre><code>\nborder: 2px solid black;\n</code></pre>\n<p>Cette syntaxe indique l’épaisseur, le style et la couleur dans un seul bloc.</p>",
  "exemple": "<h2>Exemple</h2>\n<p>Voici une règle CSS qui ajoute une bordure rouge en pointillés autour d’un paragraphe :</p>\n<pre><code>\np {\n    border: 2px dotted red;\n}\n</code></pre>\n<p>Autre exemple avec des sous-propriétés :</p>\n<pre><code>\ndiv {\n    border-width: 3px;\n    border-style: solid;\n    border-color: #333;\n}\n</code></pre>",
  "sources": "<h2>Sources Web</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/border\">border - MDN</a></li>\n<li><a href=\"https://www.w3schools.com/css/css_border.asp\">CSS Borders - W3Schools</a></li>\n</ul>",
  "infos_supplementaires": "<p>Il est possible de styliser chaque côté de la bordure séparément avec <code>border-top</code>, <code>border-right</code>, <code>border-bottom</code> et <code>border-left</code>.</p>"
},
{
  "fichier": "fiche-012",
  "competence": "Compétence : Gérer les marges (margin) et le remplissage (padding)",
  "objectif": "<h2>Objectif</h2>\n<p>Comprendre la différence entre les marges (<code>margin</code>) et le remplissage (<code>padding</code>) et savoir les utiliser pour espacer les éléments HTML.</p>",
  "theorie": "<h2>Théorie</h2>\n<p>En CSS, les propriétés <code>margin</code> et <code>padding</code> permettent de gérer l’espacement autour des éléments :</p>\n<ul>\n<li><strong><code>margin</code></strong> : espace extérieur entre l’élément et les autres éléments.</li>\n<li><strong><code>padding</code></strong> : espace intérieur entre le contenu de l’élément et sa bordure.</li>\n</ul>\n<p>Ces propriétés peuvent être définies individuellement (<code>margin-top</code>, <code>padding-left</code>, etc.) ou de manière raccourcie :</p>\n<pre><code>\nmargin: 10px 20px 10px 20px; /* haut, droite, bas, gauche */\npadding: 15px; /* tous les côtés */\n</code></pre>",
  "exemple": "<h2>Exemple</h2>\n<pre><code>\ndiv {\n    margin: 20px;\n    padding: 10px;\n    background-color: #f0f0f0;\n    border: 1px solid #ccc;\n}\n</code></pre>\n<p>Dans cet exemple :</p>\n<ul>\n<li><code>margin</code> crée un espace autour du bloc <code>div</code>.</li>\n<li><code>padding</code> crée un espace entre le contenu et la bordure.</li>\n</ul>",
  "sources": "<h2>Sources Web</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/margin\">margin - MDN</a></li>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/padding\">padding - MDN</a></li>\n<li><a href=\"https://www.w3schools.com/css/css_boxmodel.asp\">CSS Box Model - W3Schools</a></li>\n</ul>",
  "infos_supplementaires": "<p>Ces propriétés font partie du <strong>modèle de boîte CSS</strong>, essentiel pour comprendre la disposition des éléments sur une page.</p>"
},
{
  "fichier": "fiche-013",
  "competence": "Compétence : Utiliser des classes et ID comme sélecteurs",
  "objectif": "<h2>Objectif</h2>\n<p>Apprendre à cibler des éléments HTML à l’aide de sélecteurs de classe (<code>.classe</code>) et d’identifiant (<code>#id</code>) en CSS.</p>",
  "theorie": "<h2>Théorie</h2>\n<p>Les classes et les identifiants permettent de cibler précisément des éléments HTML :</p>\n<ul>\n<li><strong>Classe (<code>class</code>)</strong> : utilisée pour appliquer un style à plusieurs éléments. Le sélecteur CSS commence par un point (<code>.</code>).</li>\n<li><strong>ID (<code>id</code>)</strong> : utilisé pour cibler un élément unique. Le sélecteur CSS commence par un dièse (<code>#</code>).</li>\n</ul>\n<p>Exemples de syntaxe :</p>\n<pre><code>\n.important {\n    color: red;\n}\n\n#titre-principal {\n    font-size: 24px;\n}\n</code></pre>",
  "exemple": "<h2>Exemple</h2>\n<pre><code>\n<!-- HTML -->\n<p class=\"important\">Texte important</p>\n<h1 id=\"titre-principal\">Titre principal</h1>\n\n<!-- CSS -->\n.important {\n    font-weight: bold;\n    color: darkred;\n}\n\n#titre-principal {\n    text-align: center;\n    color: navy;\n}\n</code></pre>",
  "sources": "<h2>Sources Web</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/Class_selectors\">Sélecteurs de classe - MDN</a></li>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/ID_selectors\">Sélecteurs d’ID - MDN</a></li>\n<li><a href=\"https://www.w3schools.com/css/css_selectors.asp\">CSS Selectors - W3Schools</a></li>\n</ul>",
  "infos_supplementaires": "<p>Un même élément peut avoir plusieurs classes, mais un seul ID. Les ID doivent être uniques dans une page HTML.</p>"
},
{
  "fichier": "fiche-014",
  "competence": "Compétence : Appliquer des valeurs multiples (ex : font-family: Arial, sans-serif)",
  "objectif": "<h2>Objectif</h2>\n<p>Comprendre comment utiliser plusieurs valeurs dans une propriété CSS pour améliorer la compatibilité et la flexibilité du style.</p>",
  "theorie": "<h2>Théorie</h2>\n<p>Certaines propriétés CSS, comme <code>font-family</code>, <code>box-shadow</code> ou <code>background</code>, acceptent plusieurs valeurs séparées par des virgules ou des espaces.</p>\n<p>Dans le cas de <code>font-family</code>, on fournit une liste de polices de secours. Le navigateur utilise la première disponible :</p>\n<pre><code>\nfont-family: \"Open Sans\", Arial, sans-serif;\n</code></pre>\n<p>Les valeurs multiples permettent :</p>\n<ul>\n<li>Une meilleure compatibilité entre navigateurs et systèmes d’exploitation</li>\n<li>Une personnalisation plus fine du rendu</li>\n</ul>",
  "exemple": "<h2>Exemple</h2>\n<pre><code>\np {\n    font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n}\n</code></pre>\n<p>Dans cet exemple, le navigateur essaiera d’utiliser <code>Helvetica Neue</code>, puis <code>Helvetica</code>, puis <code>Arial</code>, et enfin une police générique sans empattement.</p>",
  "sources": "<h2>Sources Web</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/font-family\">font-family - MDN</a></li>\n<li><a href=\"https://www.w3schools.com/cssref/pr_font_font-family.asp\">font-family - W3Schools</a></li>\n</ul>",
  "infos_supplementaires": "<p>Les noms de polices contenant des espaces doivent être entourés de guillemets. Il est recommandé de toujours terminer par une famille générique (ex : <code>sans-serif</code>).</p>"
},
{
  "fichier": "fiche-015",
  "competence": "Compétence : Utiliser des valeurs raccourcies (shorthand) (ex : margin: 10px 5px;)",
  "objectif": "<h2>Objectif</h2>\n<p>Apprendre à utiliser les propriétés raccourcies (shorthand) en CSS pour écrire du code plus concis et lisible.</p>",
  "theorie": "<h2>Théorie</h2>\n<p>Les propriétés raccourcies permettent de regrouper plusieurs propriétés CSS en une seule ligne. Cela simplifie le code et améliore sa lisibilité.</p>\n<p>Par exemple, au lieu d’écrire :</p>\n<pre><code>\nmargin-top: 10px;\nmargin-right: 5px;\nmargin-bottom: 10px;\nmargin-left: 5px;\n</code></pre>\n<p>On peut écrire :</p>\n<pre><code>\nmargin: 10px 5px;\n</code></pre>\n<p>La signification dépend du nombre de valeurs :</p>\n<ul>\n<li><strong>1 valeur</strong> : tous les côtés</li>\n<li><strong>2 valeurs</strong> : haut/bas, gauche/droite</li>\n<li><strong>3 valeurs</strong> : haut, gauche/droite, bas</li>\n<li><strong>4 valeurs</strong> : haut, droite, bas, gauche (dans le sens des aiguilles d’une montre)</li>\n</ul>",
  "exemple": "<h2>Exemple</h2>\n<pre><code>\ndiv {\n    padding: 10px 20px 15px 5px;\n    border: 2px solid black;\n    margin: 0 auto;\n}\n</code></pre>\n<p>Dans cet exemple :</p>\n<ul>\n<li><code>padding</code> applique des espacements internes différents sur chaque côté.</li>\n<li><code>margin: 0 auto;</code> centre horizontalement l’élément.</li>\n</ul>",
  "sources": "<h2>Sources Web</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/Shorthand_properties\">Propriétés raccourcies - MDN</a></li>\n<li><a href=\"https://www.w3schools.com/css/css_margin.asp\">CSS Margin - W3Schools</a></li>\n<li><a href=\"https://www.w3schools.com/css/css_padding.asp\">CSS Padding - W3Schools</a></li>\n</ul>",
  "infos_supplementaires": "<p>Les propriétés raccourcies existent aussi pour <code>border</code>, <code>background</code>, <code>font</code>, etc.</p>"
},
{
  "fichier": "fiche-016",
  "competence": "Compétence : Différencier les unités de distance (px, em, rem, %, vh, vw)",
  "objectif": "<h2>Objectif</h2>\n<p>Comprendre les différentes unités de mesure utilisées en CSS pour définir les dimensions et les espacements.</p>",
  "theorie": "<h2>Théorie</h2>\n<p>En CSS, plusieurs unités permettent de définir des tailles, marges, espacements, etc. Elles se divisent en deux catégories :</p>\n<ul>\n<li><strong>Unités absolues</strong> : <code>px</code> (pixels), <code>cm</code>, <code>mm</code>, <code>in</code> (pouces), etc.</li>\n<li><strong>Unités relatives</strong> : dépendent du contexte ou de la taille de l’écran.</li>\n</ul>\n<p>Les plus courantes :</p>\n<ul>\n<li><code>px</code> : pixel, unité fixe.</li>\n<li><code>em</code> : relative à la taille de police de l’élément parent.</li>\n<li><code>rem</code> : relative à la taille de police de l’élément racine (<code>html</code>).</li>\n<li><code>%</code> : pourcentage de la taille du parent.</li>\n<li><code>vh</code> : 1% de la hauteur de la fenêtre (viewport).</li>\n<li><code>vw</code> : 1% de la largeur de la fenêtre.</li>\n</ul>",
  "exemple": "<h2>Exemple</h2>\n<pre><code>\nhtml {\n    font-size: 16px;\n}\n\np {\n    font-size: 1.5em; /* 24px si hérité de 16px */\n    margin: 5vh 10vw; /* marge verticale et horizontale relative à la fenêtre */\n}\n</code></pre>",
  "sources": "<h2>Sources Web</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/length\">Unités de longueur - MDN</a></li>\n<li><a href=\"https://www.w3schools.com/cssref/css_units.asp\">CSS Units - W3Schools</a></li>\n</ul>",
  "infos_supplementaires": "<p>Utiliser des unités relatives permet de créer des interfaces plus flexibles et adaptables aux différents écrans (responsive design).</p>"
},
{
  "fichier": "fiche-017",
  "competence": "Compétence : Comprendre les unités de couleur (hex, rgb, hsl)",
  "objectif": "<h2>Objectif</h2>\n<p>Apprendre à utiliser les différents formats de couleur en CSS : hexadécimal, RGB et HSL.</p>",
  "theorie": "<h2>Théorie</h2>\n<p>En CSS, les couleurs peuvent être définies de plusieurs manières :</p>\n<ul>\n<li><strong>Hexadécimal (<code>#RRGGBB</code>)</strong> : chaque paire représente une composante rouge, verte ou bleue. Exemple : <code>#ff0000</code> pour le rouge.</li>\n<li><strong>RGB (<code>rgb(r, g, b)</code>)</strong> : valeurs numériques de 0 à 255 pour chaque composante. Exemple : <code>rgb(255, 0, 0)</code>.</li>\n<li><strong>HSL (<code>hsl(h, s%, l%)</code>)</strong> : teinte (0–360), saturation (0–100%) et luminosité (0–100%). Exemple : <code>hsl(0, 100%, 50%)</code> pour le rouge.</li>\n</ul>\n<p>Ces formats permettent une grande flexibilité dans la gestion des couleurs, notamment pour les effets dynamiques ou les thèmes personnalisés.</p>",
  "exemple": "<h2>Exemple</h2>\n<pre><code>\n/* Rouge en différents formats */\n.box1 {\n    background-color: #ff0000;\n}\n.box2 {\n    background-color: rgb(255, 0, 0);\n}\n.box3 {\n    background-color: hsl(0, 100%, 50%);\n}\n</code></pre>",
  "sources": "<h2>Sources Web</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/color_value\">Valeurs de couleur - MDN</a></li>\n<li><a href=\"https://www.w3schools.com/colors/colors_picker.asp\">Color Picker - W3Schools</a></li>\n<li><a href=\"https://htmlcolorcodes.com/\">HTML Color Codes</a></li>\n</ul>",
  "infos_supplementaires": "<p>Les formats <code>rgba()</code> et <code>hsla()</code> permettent d’ajouter une transparence via un canal alpha (valeur entre 0 et 1).</p>"
},
{
  "fichier": "fiche-018",
  "competence": "Compétence : Modifier le style (italic, normal) et la graisse (bold, lighter) de la police",
  "objectif": "<h2>Objectif</h2>\n<p>Apprendre à modifier l’apparence du texte en jouant sur le style (italique, normal) et la graisse (épaisseur) de la police avec CSS.</p>",
  "theorie": "<h2>Théorie</h2>\n<p>Deux propriétés CSS permettent de styliser le texte :</p>\n<ul>\n<li><strong><code>font-style</code></strong> : définit le style du texte. Valeurs possibles : <code>normal</code>, <code>italic</code>, <code>oblique</code>.</li>\n<li><strong><code>font-weight</code></strong> : définit l’épaisseur du texte. Valeurs possibles : <code>normal</code>, <code>bold</code>, <code>lighter</code>, ou des valeurs numériques de <code>100</code> à <code>900</code>.</li>\n</ul>\n<p>Ces propriétés sont souvent utilisées pour mettre en évidence des éléments importants ou pour améliorer la hiérarchie visuelle.</p>",
  "exemple": "<h2>Exemple</h2>\n<pre><code>\np {\n    font-style: italic;\n    font-weight: bold;\n}\n\nh1 {\n    font-style: normal;\n    font-weight: 700;\n}\n</code></pre>\n<p>Dans cet exemple :</p>\n<ul>\n<li>Les paragraphes sont en italique et en gras.</li>\n<li>Le titre <code>h1</code> est en style normal avec une graisse forte (700).</li>\n</ul>",
  "sources": "<h2>Sources Web</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/font-style\">font-style - MDN</a></li>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/font-weight\">font-weight - MDN</a></li>\n<li><a href=\"https://www.w3schools.com/css/css_font.asp\">CSS Font - W3Schools</a></li>\n</ul>",
  "infos_supplementaires": "<p>Les polices personnalisées peuvent ne pas supporter toutes les valeurs de <code>font-weight</code>. Il est donc utile de tester le rendu sur différents navigateurs.</p>"
},
{
  "fichier": "fiche-019",
  "competence": "Compétence : Appliquer un style au survol (:hover)",
  "objectif": "<h2>Objectif</h2>\n<p>Apprendre à modifier l’apparence d’un élément HTML lorsqu’un utilisateur le survole avec la souris, grâce à la pseudo-classe <code>:hover</code>.</p>",
  "theorie": "<h2>Théorie</h2>\n<p>La pseudo-classe <code>:hover</code> permet d’appliquer un style temporaire à un élément lorsqu’il est survolé par le curseur de la souris. Elle est très utilisée pour améliorer l’interactivité, notamment sur les boutons, les liens ou les cartes.</p>\n<p>Elle s’utilise en ajoutant <code>:hover</code> après un sélecteur :</p>\n<pre><code>\na:hover {\n    color: red;\n}\n</code></pre>\n<p>On peut modifier n’importe quelle propriété CSS : couleur, fond, bordure, ombre, transformation, etc.</p>",
  "exemple": "<h2>Exemple</h2>\n<pre><code>\nbutton {\n    background-color: #007bff;\n    color: white;\n    border: none;\n    padding: 10px 20px;\n    cursor: pointer;\n}\n\nbutton:hover {\n    background-color: #0056b3;\n}\n</code></pre>\n<p>Dans cet exemple, le bouton change de couleur de fond lorsqu’on le survole.</p>",
  "sources": "<h2>Sources Web</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/:hover\">:hover - MDN</a></li>\n<li><a href=\"https://www.w3schools.com/cssref/sel_hover.asp\">CSS :hover Selector - W3Schools</a></li>\n</ul>",
  "infos_supplementaires": "<p>La pseudo-classe <code>:hover</code> ne fonctionne pas sur les appareils tactiles de la même manière que sur les ordinateurs. Il est donc important de tester le comportement sur différents types d’appareils.</p>"
},
{
  "fichier": "fiche-020",
  "competence": "Compétence : Définir le positionnement (absolute, relative, fixed, sticky)",
  "objectif": "<h2>Objectif</h2>\n<p>Comprendre les différents types de positionnement CSS pour contrôler la disposition des éléments sur une page web.</p>",
  "theorie": "<h2>Théorie</h2>\n<p>La propriété <code>position</code> permet de définir comment un élément est positionné dans le flux du document. Les valeurs principales sont :</p>\n<ul>\n<li><strong><code>static</code></strong> (valeur par défaut) : l’élément suit le flux normal du document.</li>\n<li><strong><code>relative</code></strong> : l’élément est positionné par rapport à sa position d’origine.</li>\n<li><strong><code>absolute</code></strong> : l’élément est positionné par rapport à son ancêtre positionné (non-static).</li>\n<li><strong><code>fixed</code></strong> : l’élément est positionné par rapport à la fenêtre du navigateur, même lors du défilement.</li>\n<li><strong><code>sticky</code></strong> : l’élément se comporte comme <code>relative</code> jusqu’à un certain point, puis devient <code>fixed</code>.</li>\n</ul>\n<p>Ces valeurs sont souvent utilisées avec les propriétés <code>top</code>, <code>right</code>, <code>bottom</code> et <code>left</code>.</p>",
  "exemple": "<h2>Exemple</h2>\n<pre><code>\n.relative-box {\n    position: relative;\n    top: 10px;\n    left: 20px;\n}\n\n.absolute-box {\n    position: absolute;\n    top: 0;\n    right: 0;\n}\n\n.fixed-header {\n    position: fixed;\n    top: 0;\n    width: 100%;\n    background-color: white;\n}\n\n.sticky-menu {\n    position: sticky;\n    top: 50px;\n}\n</code></pre>",
  "sources": "<h2>Sources Web</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/position\">position - MDN</a></li>\n<li><a href=\"https://www.w3schools.com/css/css_positioning.asp\">CSS Positioning - W3Schools</a></li>\n</ul>",
  "infos_supplementaires": "<p>Le positionnement est essentiel pour créer des interfaces complexes, comme des barres de navigation fixes ou des éléments superposés.</p>"
},
{
  "fichier": "fiche-021",
  "competence": "Compétence : Comprendre le modèle de boîte CSS (box model)",
  "objectif": "<h2>Objectif</h2>\n<p>Comprendre comment les éléments HTML sont modélisés en boîtes et comment les propriétés CSS influencent leur taille et leur espacement.</p>",
  "theorie": "<h2>Théorie</h2>\n<p>Le modèle de boîte CSS (box model) est un concept fondamental qui décrit la structure d’un élément HTML comme une boîte composée de plusieurs couches :</p>\n<ul>\n<li><strong>Content</strong> : le contenu réel (texte, image, etc.).</li>\n<li><strong>Padding</strong> : l’espace entre le contenu et la bordure.</li>\n<li><strong>Border</strong> : la bordure entourant le padding.</li>\n<li><strong>Margin</strong> : l’espace entre la bordure de l’élément et les autres éléments.</li>\n</ul>\n<p>La taille totale d’un élément dépend de toutes ces couches, sauf si la propriété <code>box-sizing</code> est utilisée pour modifier ce comportement.</p>",
  "exemple": "<h2>Exemple</h2>\n<pre><code>\ndiv {\n    width: 200px;\n    padding: 20px;\n    border: 5px solid black;\n    margin: 10px;\n    box-sizing: content-box; /* ou border-box */\n}\n</code></pre>\n<p>Avec <code>content-box</code>, la largeur totale = contenu + padding + border. Avec <code>border-box</code>, la largeur inclut padding et border.</p>",
  "sources": "<h2>Sources Web</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/CSS_box_model\">Modèle de boîte CSS - MDN</a></li>\n<li><a href=\"https://www.w3schools.com/css/css_boxmodel.asp\">CSS Box Model - W3Schools</a></li>\n</ul>",
  "infos_supplementaires": "<p>Utiliser <code>box-sizing: border-box;</code> est recommandé pour simplifier la gestion des dimensions, surtout dans les mises en page complexes.</p>"
},
{
  "fichier": "fiche-021",
  "competence": "Compétence : Comprendre le modèle de boîte CSS (box model)",
  "objectif": "<h2>Objectif</h2>\n<p>Comprendre comment les éléments HTML sont modélisés en boîtes et comment les propriétés CSS influencent leur taille et leur espacement.</p>",
  "theorie": "<h2>Théorie</h2>\n<p>Le modèle de boîte CSS (box model) est un concept fondamental qui décrit la structure d’un élément HTML comme une boîte composée de plusieurs couches :</p>\n<ul>\n<li><strong>Content</strong> : le contenu réel (texte, image, etc.).</li>\n<li><strong>Padding</strong> : l’espace entre le contenu et la bordure.</li>\n<li><strong>Border</strong> : la bordure entourant le padding.</li>\n<li><strong>Margin</strong> : l’espace entre la bordure de l’élément et les autres éléments.</li>\n</ul>\n<p>La taille totale d’un élément dépend de toutes ces couches, sauf si la propriété <code>box-sizing</code> est utilisée pour modifier ce comportement.</p>",
  "exemple": "<h2>Exemple</h2>\n<pre><code>\ndiv {\n    width: 200px;\n    padding: 20px;\n    border: 5px solid black;\n    margin: 10px;\n    box-sizing: content-box; /* ou border-box */\n}\n</code></pre>\n<p>Avec <code>content-box</code>, la largeur totale = contenu + padding + border. Avec <code>border-box</code>, la largeur inclut padding et border.</p>",
  "sources": "<h2>Sources Web</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/CSS_box_model\">Modèle de boîte CSS - MDN</a></li>\n<li><a href=\"https://www.w3schools.com/css/css_boxmodel.asp\">CSS Box Model - W3Schools</a></li>\n</ul>",
  "infos_supplementaires": "<p>Utiliser <code>box-sizing: border-box;</code> est recommandé pour simplifier la gestion des dimensions, surtout dans les mises en page complexes.</p>"
},
{
  "fichier": "fiche-023",
  "competence": "Compétence : Gérer la transparence (opacity, rgba)",
  "objectif": "<h2>Objectif</h2>\n<p>Apprendre à appliquer des effets de transparence aux éléments HTML à l’aide des propriétés <code>opacity</code> et <code>rgba()</code>.</p>",
  "theorie": "<h2>Théorie</h2>\n<p>Il existe deux principales façons de gérer la transparence en CSS :</p>\n<ul>\n<li><strong><code>opacity</code></strong> : définit la transparence globale d’un élément (valeur entre <code>0</code> et <code>1</code>). Elle affecte tout l’élément, y compris son contenu.</li>\n<li><strong><code>rgba()</code></strong> : permet de définir une couleur avec un canal alpha (transparence) sans affecter les enfants de l’élément. Syntaxe : <code>rgba(rouge, vert, bleu, alpha)</code>.</li>\n</ul>\n<p>Utiliser <code>rgba()</code> est souvent préférable pour appliquer une transparence uniquement à l’arrière-plan ou à une couleur spécifique.</p>",
  "exemple": "<h2>Exemple</h2>\n<pre><code>\n/* Transparence globale */\ndiv {\n    opacity: 0.5;\n}\n\n/* Couleur de fond semi-transparente */\nsection {\n    background-color: rgba(0, 0, 0, 0.3);\n    color: white;\n    padding: 20px;\n}\n</code></pre>",
  "sources": "<h2>Sources Web</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/opacity\">opacity - MDN</a></li>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/color_value/rgba\">rgba() - MDN</a></li>\n<li><a href=\"https://www.w3schools.com/css/css_image_transparency.asp\">CSS Transparency - W3Schools</a></li>\n</ul>",
  "infos_supplementaires": "<p>Attention : <code>opacity</code> rend également les enfants de l’élément transparents. Pour éviter cela, utilisez <code>rgba()</code> sur les couleurs uniquement.</p>"
},
{
  "fichier": "fiche-024",
  "competence": "Compétence : Appliquer des transitions simples (transition: all 0.3s ease;)",
  "objectif": "<h2>Objectif</h2>\n<p>Apprendre à créer des effets de transition fluides entre deux états CSS à l’aide de la propriété <code>transition</code>.</p>",
  "theorie": "<h2>Théorie</h2>\n<p>La propriété <code>transition</code> permet d’animer le changement d’une ou plusieurs propriétés CSS sur une durée définie. Elle est souvent utilisée avec des pseudo-classes comme <code>:hover</code>.</p>\n<p>Syntaxe raccourcie :</p>\n<pre><code>\ntransition: propriété durée fonction-retard;\n</code></pre>\n<p>Exemple : <code>transition: all 0.3s ease;</code> signifie que toutes les propriétés modifiées seront animées sur 0.3 secondes avec une accélération douce.</p>\n<p>Fonctions de transition courantes :</p>\n<ul>\n<li><code>ease</code> : démarrage et fin doux</li>\n<li><code>linear</code> : vitesse constante</li>\n<li><code>ease-in</code>, <code>ease-out</code>, <code>ease-in-out</code></li>\n</ul>",
  "exemple": "<h2>Exemple</h2>\n<pre><code>\nbutton {\n    background-color: #007bff;\n    color: white;\n    transition: background-color 0.3s ease;\n}\n\nbutton:hover {\n    background-color: #0056b3;\n}\n</code></pre>\n<p>Dans cet exemple, la couleur de fond du bouton change progressivement lorsqu’on le survole.</p>",
  "sources": "<h2>Sources Web</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/transition\">transition - MDN</a></li>\n<li><a href=\"https://www.w3schools.com/css/css3_transitions.asp\">CSS Transitions - W3Schools</a></li>\n</ul>",
  "infos_supplementaires": "<p>Les transitions ne fonctionnent que sur les propriétés dont la valeur peut être interpolée (ex : couleurs, dimensions, positions).</p>"
},
{
  "fichier": "fiche-025",
  "competence": "Compétence : Transformer l’affichage du texte (text-transform, text-align, letter-spacing)",
  "objectif": "<h2>Objectif</h2>\n<p>Apprendre à modifier l’apparence du texte en jouant sur la casse, l’alignement et l’espacement des lettres avec CSS.</p>",
  "theorie": "<h2>Théorie</h2>\n<p>Trois propriétés CSS permettent de transformer l’affichage du texte :</p>\n<ul>\n<li><strong><code>text-transform</code></strong> : modifie la casse du texte. Valeurs : <code>uppercase</code>, <code>lowercase</code>, <code>capitalize</code>, <code>none</code>.</li>\n<li><strong><code>text-align</code></strong> : aligne le texte horizontalement. Valeurs : <code>left</code>, <code>right</code>, <code>center</code>, <code>justify</code>.</li>\n<li><strong><code>letter-spacing</code></strong> : ajuste l’espacement entre les lettres. Valeurs : longueur (ex : <code>2px</code>).</li>\n</ul>\n<p>Ces propriétés sont utiles pour améliorer la lisibilité, l’esthétique ou la hiérarchie visuelle du contenu.</p>",
  "exemple": "<h2>Exemple</h2>\n<pre><code>\nh1 {\n    text-transform: uppercase;\n    text-align: center;\n    letter-spacing: 3px;\n}\n\np {\n    text-align: justify;\n    letter-spacing: 0.5px;\n}\n</code></pre>\n<p>Dans cet exemple, le titre est en majuscules, centré, avec un espacement accentué entre les lettres. Le paragraphe est justifié avec un léger espacement.</p>",
  "sources": "<h2>Sources Web</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/text-transform\">text-transform - MDN</a></li>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/text-align\">text-align - MDN</a></li>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/letter-spacing\">letter-spacing - MDN</a></li>\n</ul>",
  "infos_supplementaires": "<p>Utiliser <code>text-transform</code> permet de styliser le texte sans modifier son contenu HTML, ce qui est utile pour l’accessibilité et la maintenance.</p>"
},
{
  "fichier": "fiche-026",
  "competence": "Compétence : Utiliser des sélecteurs avancés (.classe, #id, div > p, ul li:first-child)",
  "objectif": "<h2>Objectif</h2>\n<p>Apprendre à cibler précisément des éléments HTML à l’aide de sélecteurs CSS avancés pour appliquer des styles spécifiques.</p>",
  "theorie": "<h2>Théorie</h2>\n<p>Les sélecteurs CSS permettent de cibler des éléments HTML selon différents critères. Voici quelques sélecteurs avancés :</p>\n<ul>\n<li><strong><code>.classe</code></strong> : cible tous les éléments ayant une classe spécifique.</li>\n<li><strong><code>#id</code></strong> : cible un élément unique avec un identifiant spécifique.</li>\n<li><strong><code>div > p</code></strong> : cible les paragraphes <code>&lt;p&gt;</code> qui sont enfants directs d’un <code>&lt;div&gt;</code>.</li>\n<li><strong><code>ul li:first-child</code></strong> : cible le premier élément <code>&lt;li&gt;</code> d’une liste <code>&lt;ul&gt;</code>.</li>\n</ul>\n<p>Ces sélecteurs permettent de styliser des éléments de manière fine et contextuelle.</p>",
  "exemple": "<h2>Exemple</h2>\n<pre><code>\n/* Tous les éléments avec la classe .important */\n.important {\n    color: red;\n}\n\n/* Élément avec l’ID #header */\n#header {\n    background-color: #f0f0f0;\n}\n\n/* Paragraphe enfant direct d’un div */\ndiv > p {\n    font-style: italic;\n}\n\n/* Premier élément d’une liste */\nul li:first-child {\n    font-weight: bold;\n}\n</code></pre>",
  "sources": "<h2>Sources Web</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/CSS_selectors\">Sélecteurs CSS - MDN</a></li>\n<li><a href=\"https://www.w3schools.com/cssref/css_selectors.asp\">CSS Selectors - W3Schools</a></li>\n</ul>",
  "infos_supplementaires": "<p>Les sélecteurs avancés sont essentiels pour éviter de multiplier les classes dans le HTML et pour cibler précisément des éléments dans des structures complexes.</p>"
},
{
  "fichier": "fiche-027",
  "competence": "Compétence : Comprendre la cascade et la spécificité",
  "objectif": "<h2>Objectif</h2>\n<p>Comprendre comment le navigateur choisit quelle règle CSS appliquer lorsqu’il y a des conflits, grâce aux notions de cascade et de spécificité.</p>",
  "theorie": "<h2>Théorie</h2>\n<p>La <strong>cascade</strong> est le processus par lequel le navigateur décide quelle règle CSS appliquer lorsqu’il y a plusieurs règles en concurrence. Elle prend en compte :</p>\n<ul>\n<li>L’origine de la règle (utilisateur, auteur, navigateur)</li>\n<li>L’importance (<code>!important</code>)</li>\n<li>La spécificité du sélecteur</li>\n<li>L’ordre d’apparition dans le code</li>\n</ul>\n<p>La <strong>spécificité</strong> est une mesure de la précision d’un sélecteur. Plus un sélecteur est spécifique, plus il a de poids :</p>\n<ul>\n<li><code>#id</code> : très spécifique</li>\n<li><code>.classe</code> : moyennement spécifique</li>\n<li><code>élément</code> : peu spécifique</li>\n</ul>\n<p>Exemple de hiérarchie :</p>\n<pre><code>\n/* Moins spécifique */\np {\n    color: blue;\n}\n\n/* Plus spécifique */\n.important {\n    color: green;\n}\n\n/* Très spécifique */\n#titre {\n    color: red;\n}\n</code></pre>\n<p>Dans ce cas, si un paragraphe a l’ID <code>titre</code>, il sera rouge.</p>",
  "exemple": "<h2>Exemple</h2>\n<pre><code>\n/* Conflit entre plusieurs règles */\np {\n    color: black;\n}\n\np.important {\n    color: orange;\n}\n\n#special {\n    color: purple;\n}\n\n/* HTML */\n<p id=\"special\" class=\"important\">Texte</p>\n</code></pre>\n<p>Le texte sera violet car l’ID <code>#special</code> est plus spécifique que la classe <code>.important</code> ou le sélecteur <code>p</code>.</p>",
  "sources": "<h2>Sources Web</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/Cascade\">La cascade CSS - MDN</a></li>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/Specificity\">Spécificité CSS - MDN</a></li>\n<li><a href=\"https://www.w3schools.com/css/css_specificity.asp\">CSS Specificity - W3Schools</a></li>\n</ul>",
  "infos_supplementaires": "<p>Utiliser <code>!important</code> doit rester exceptionnel, car cela casse la logique de la cascade et rend le code plus difficile à maintenir.</p>"
},
{
  "fichier": "fiche-028",
  "competence": "Compétence : Importer des règles via @import ou plusieurs feuilles de style",
  "objectif": "<h2>Objectif</h2>\n<p>Apprendre à organiser et structurer le CSS en important des fichiers externes ou en utilisant plusieurs feuilles de style.</p>",
  "theorie": "<h2>Théorie</h2>\n<p>Il existe deux manières principales d’inclure plusieurs fichiers CSS dans un projet :</p>\n<ul>\n<li><strong><code>@import</code></strong> : permet d’importer un fichier CSS dans un autre fichier CSS. Syntaxe : <code>@import url('style.css');</code></li>\n<li><strong><code>&lt;link&gt;</code></strong> : permet d’inclure plusieurs feuilles de style dans le <code>&lt;head&gt;</code> du document HTML.</li>\n</ul>\n<p>Utiliser plusieurs fichiers CSS permet de mieux organiser le code (ex : <code>reset.css</code>, <code>layout.css</code>, <code>theme.css</code>).</p>\n<p><strong>Différences :</strong></p>\n<ul>\n<li><code>@import</code> peut être plus lent car les fichiers sont chargés après le fichier principal.</li>\n<li><code>&lt;link&gt;</code> est recommandé pour de meilleures performances.</li>\n</ul>",
  "exemple": "<h2>Exemple</h2>\n<pre><code>\n/* Dans main.css */\n@import url('reset.css');\n@import url('theme.css');\n</code></pre>\n<pre><code>\n<!-- Dans le HTML -->\n<head>\n  <link rel=\"stylesheet\" href=\"reset.css\">\n  <link rel=\"stylesheet\" href=\"theme.css\">\n  <link rel=\"stylesheet\" href=\"main.css\">\n</head>\n</code></pre>",
  "sources": "<h2>Sources Web</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/@import\">@import - MDN</a></li>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/HTML/Element/link\">Élément &lt;link&gt; - MDN</a></li>\n<li><a href=\"https://www.w3schools.com/css/css_howto.asp\">How to Add CSS - W3Schools</a></li>\n</ul>",
  "infos_supplementaires": "<p>Il est conseillé d’éviter <code>@import</code> dans les projets professionnels pour des raisons de performance, sauf dans des cas spécifiques (ex : thèmes dynamiques).</p>"
},
{
  "fichier": "fiche-029",
  "competence": "Compétence : Utiliser les pseudo-éléments ::before et ::after",
  "objectif": "<h2>Objectif</h2>\n<p>Apprendre à insérer du contenu décoratif ou fonctionnel avant ou après un élément HTML à l’aide des pseudo-éléments <code>::before</code> et <code>::after</code>.</p>",
  "theorie": "<h2>Théorie</h2>\n<p>Les pseudo-éléments <code>::before</code> et <code>::after</code> permettent d’ajouter du contenu généré par CSS, sans modifier le HTML. Ils sont souvent utilisés pour :</p>\n<ul>\n<li>Ajouter des icônes ou symboles</li>\n<li>Créer des effets visuels (encadrés, flèches, décorations)</li>\n<li>Insérer du texte ou des éléments graphiques</li>\n</ul>\n<p>Ils nécessitent obligatoirement la propriété <code>content</code> pour fonctionner.</p>",
  "exemple": "<h2>Exemple</h2>\n<pre><code>\np::before {\n    content: \"→ \";\n    color: gray;\n}\n\np::after {\n    content: \" ✔\";\n    color: green;\n}\n</code></pre>\n<p>Ce code ajoute une flèche avant chaque paragraphe et une coche verte après.</p>",
  "sources": "<h2>Sources Web</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/::before\">::before - MDN</a></li>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/::after\">::after - MDN</a></li>\n<li><a href=\"https://www.w3schools.com/css/css_pseudo_elements.asp\">CSS Pseudo-elements - W3Schools</a></li>\n</ul>",
  "infos_supplementaires": "<p>Les pseudo-éléments sont très utiles pour enrichir l’interface sans alourdir le HTML. Ils peuvent aussi être stylisés avec toutes les propriétés CSS classiques.</p>"
},
{
  "fichier": "fiche-030",
  "competence": "Compétence : Aligner et distribuer les éléments avec Flexbox ou Grid",
  "objectif": "<h2>Objectif</h2>\n<p>Apprendre à utiliser les systèmes de mise en page CSS Flexbox et Grid pour organiser, aligner et répartir les éléments dans une interface web.</p>",
  "theorie": "<h2>Théorie</h2>\n<p><strong>Flexbox</strong> (Flexible Box Layout) est un modèle de boîte unidimensionnel (ligne ou colonne) qui permet :</p>\n<ul>\n<li>D’aligner les éléments horizontalement ou verticalement</li>\n<li>De répartir l’espace entre les éléments</li>\n<li>De gérer facilement les tailles dynamiques</li>\n</ul>\n<p><strong>Grid</strong> (CSS Grid Layout) est un système bidimensionnel (lignes et colonnes) qui permet :</p>\n<ul>\n<li>De créer des mises en page complexes</li>\n<li>De positionner précisément les éléments dans une grille</li>\n<li>De gérer les espacements, les alignements et les zones nommées</li>\n</ul>",
  "exemple": "<h2>Exemple</h2>\n<pre><code>\n/* Flexbox */\n.container {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n/* Grid */\n.grid-container {\n    display: grid;\n    grid-template-columns: 1fr 2fr;\n    gap: 20px;\n}\n</code></pre>\n<p>Flexbox est idéal pour les barres de navigation ou les listes horizontales. Grid est parfait pour les mises en page de type grille ou tableau.</p>",
  "sources": "<h2>Sources Web</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/CSS_Flexible_Box_Layout\">Flexbox - MDN</a></li>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/CSS_Grid_Layout\">CSS Grid - MDN</a></li>\n<li><a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">Guide Flexbox - CSS-Tricks</a></li>\n<li><a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">Guide Grid - CSS-Tricks</a></li>\n</ul>",
  "infos_supplementaires": "<p>Flexbox et Grid peuvent être combinés dans un même projet pour tirer parti de leurs forces respectives.</p>"
},
{
  "fichier": "fiche-031",
  "competence": "Compétence : Utiliser Flexbox en profondeur (alignement, direction, wrapping)",
  "objectif": "Objectif\nMaîtriser l'utilisation avancée de Flexbox pour créer des mises en page flexibles et adaptables.",
  "theorie": "Théorie\nFlexbox (Flexible Box Layout) est un module CSS conçu pour améliorer la distribution de l'espace et l'alignement des éléments dans un conteneur, même lorsque leur taille est inconnue ou dynamique.\n\nLes propriétés principales de Flexbox sont :\n<ul>\n<li><strong>display: flex;</strong> — active le mode Flexbox sur un conteneur.</li>\n<li><strong>flex-direction</strong> — définit la direction principale des éléments (row, row-reverse, column, column-reverse).</li>\n<li><strong>flex-wrap</strong> — permet aux éléments de passer à la ligne (nowrap, wrap, wrap-reverse).</li>\n<li><strong>justify-content</strong> — aligne les éléments sur l’axe principal (flex-start, center, space-between, space-around, space-evenly).</li>\n<li><strong>align-items</strong> — aligne les éléments sur l’axe secondaire (stretch, flex-start, flex-end, center, baseline).</li>\n<li><strong>align-content</strong> — aligne les lignes multiples (similaire à align-items mais pour plusieurs lignes).</li>\n<li><strong>gap</strong> — définit l’espace entre les éléments enfants.</li>\n</ul>\n\nChaque élément enfant peut aussi être contrôlé individuellement avec :\n<ul>\n<li><strong>flex-grow</strong> — définit la capacité à grandir.</li>\n<li><strong>flex-shrink</strong> — définit la capacité à rétrécir.</li>\n<li><strong>flex-basis</strong> — définit la taille de base avant répartition de l’espace.</li>\n<li><strong>align-self</strong> — permet d’aligner un élément différemment des autres.</li>\n</ul>",
  "exemple": "Exemple\nVoici un exemple de conteneur Flexbox avec plusieurs propriétés :\n\n```html\n<div class=\"container\">\n  <div class=\"item\">1</div>\n  <div class=\"item\">2</div>\n  <div class=\"item\">3</div>\n</div>\n```\n\n```css\n.container {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  align-items: center;\n  gap: 10px;\n}\n\n.item {\n  flex: 1 1 100px;\n  background-color: lightblue;\n  padding: 20px;\n  text-align: center;\n}\n```",
  "sources": "Sources Web\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox\">MDN - Concepts de base de Flexbox</a></li>\n<li><a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">CSS-Tricks - Guide complet de Flexbox</a></li>\n<li><a href=\"https://flexboxfroggy.com/\">Flexbox Froggy - Jeu interactif pour apprendre Flexbox</a></li>\n</ul>",
  "infos_supplementaires": "Astuce : Utilisez les outils de développement du navigateur pour visualiser les lignes Flexbox et tester les alignements en temps réel."
},
{
  "fichier": "fiche-032",
  "competence": "Compétence : Utiliser CSS Grid pour des mises en page complexes",
  "objectif": "Objectif\nComprendre et appliquer CSS Grid pour créer des mises en page structurées, flexibles et complexes.",
  "theorie": "Théorie\nCSS Grid Layout est un système de mise en page bidimensionnel qui permet de gérer à la fois les lignes et les colonnes. Il est particulièrement adapté pour créer des structures complexes et responsives.\n\nPrincipales propriétés du conteneur :\n<ul>\n<li><strong>display: grid;</strong> — active le mode Grid sur un conteneur.</li>\n<li><strong>grid-template-columns / grid-template-rows</strong> — définit la structure des colonnes et lignes.</li>\n<li><strong>gap</strong> — définit l’espace entre les lignes et colonnes.</li>\n<li><strong>grid-template-areas</strong> — permet de nommer des zones pour une mise en page plus lisible.</li>\n<li><strong>justify-items / align-items</strong> — contrôle l’alignement des éléments dans chaque cellule.</li>\n</ul>\n\nPropriétés des éléments enfants :\n<ul>\n<li><strong>grid-column / grid-row</strong> — permet de positionner un élément sur plusieurs colonnes ou lignes.</li>\n<li><strong>grid-area</strong> — assigne un élément à une zone nommée.</li>\n<li><strong>justify-self / align-self</strong> — aligne un élément individuellement dans sa cellule.</li>\n</ul>\n\nCSS Grid est complémentaire à Flexbox : Flexbox est unidimensionnel (ligne ou colonne), tandis que Grid est bidimensionnel (ligne et colonne).",
  "exemple": "Exemple\nVoici un exemple de mise en page avec CSS Grid :\n\n```html\n<div class=\"grid-container\">\n  <header>Header</header>\n  <nav>Navigation</nav>\n  <main>Contenu principal</main>\n  <aside>Aside</aside>\n  <footer>Pied de page</footer>\n</div>\n```\n\n```css\n.grid-container {\n  display: grid;\n  grid-template-areas:\n    \"header header\"\n    \"nav main\"\n    \"nav aside\"\n    \"footer footer\";\n  grid-template-columns: 1fr 3fr;\n  grid-template-rows: auto;\n  gap: 10px;\n}\n\nheader { grid-area: header; }\nnav { grid-area: nav; }\nmain { grid-area: main; }\naside { grid-area: aside; }\nfooter { grid-area: footer; }\n```",
  "sources": "Sources Web\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/CSS_Grid_Layout\">MDN - CSS Grid Layout</a></li>\n<li><a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">CSS-Tricks - Guide complet de CSS Grid</a></li>\n<li><a href=\"https://gridbyexample.com/\">Grid by Example - Exemples pratiques</a></li>\n</ul>",
  "infos_supplementaires": "Astuce : Utilisez les outils de développement pour visualiser les lignes et colonnes de la grille avec l’option \"Inspecter\" > \"Grille\" dans les navigateurs modernes."
},
{
  "fichier": "fiche-033",
  "competence": "Compétence : Créer des animations CSS (@keyframes)",
  "objectif": "Objectif\nApprendre à créer des animations fluides et dynamiques avec CSS en utilisant la règle @keyframes.",
  "theorie": "Théorie\nLes animations CSS permettent de modifier progressivement les styles d’un élément sur une durée définie. Elles sont utiles pour améliorer l’interactivité et l’esthétique d’un site web.\n\nLa règle <strong>@keyframes</strong> définit les étapes d’une animation. Chaque étape correspond à un pourcentage (de 0% à 100%) ou à des mots-clés (from, to).\n\nPropriétés principales :\n<ul>\n<li><strong>animation-name</strong> — nom de l’animation définie avec @keyframes.</li>\n<li><strong>animation-duration</strong> — durée de l’animation (ex : 2s).</li>\n<li><strong>animation-timing-function</strong> — courbe de vitesse (ease, linear, ease-in, ease-out, etc.).</li>\n<li><strong>animation-delay</strong> — délai avant le début de l’animation.</li>\n<li><strong>animation-iteration-count</strong> — nombre de répétitions (ou infinite).</li>\n<li><strong>animation-direction</strong> — direction de l’animation (normal, reverse, alternate).</li>\n<li><strong>animation-fill-mode</strong> — comportement avant/après l’animation (none, forwards, backwards, both).</li>\n</ul>",
  "exemple": "Exemple\nVoici une animation simple qui fait bouger un carré de gauche à droite :\n\n```html\n<div class=\"box\"></div>\n```\n\n```css\n.box {\n  width: 100px;\n  height: 100px;\n  background-color: coral;\n  animation: slide 2s ease-in-out infinite;\n}\n\n@keyframes slide {\n  0% { transform: translateX(0); }\n  50% { transform: translateX(200px); }\n  100% { transform: translateX(0); }\n}\n```",
  "sources": "Sources Web\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/@keyframes\">MDN - @keyframes</a></li>\n<li><a href=\"https://css-tricks.com/almanac/properties/a/animation/\">CSS-Tricks - Guide des animations CSS</a></li>\n<li><a href=\"https://animista.net/\">Animista - Générateur d’animations CSS</a></li>\n</ul>",
  "infos_supplementaires": "Astuce : Combinez les animations avec les pseudo-classes comme :hover pour créer des effets interactifs."
},
{
  "fichier": "fiche-034",
  "competence": "Compétence : Gérer les z-index et la superposition",
  "objectif": "Objectif\nComprendre comment fonctionne la superposition des éléments HTML et utiliser la propriété z-index pour contrôler leur ordre d'affichage.",
  "theorie": "Théorie\nEn CSS, la superposition des éléments est gérée par le système de pile (stacking context). Chaque élément HTML peut être positionné dans un plan vertical grâce à la propriété <strong>z-index</strong>.\n\nConditions pour que z-index fonctionne :\n<ul>\n<li>L’élément doit avoir une position autre que <code>static</code> (ex : relative, absolute, fixed, sticky).</li>\n</ul>\n\nRègles de base :\n<ul>\n<li>Un élément avec un z-index plus élevé sera affiché au-dessus d’un élément avec un z-index plus bas.</li>\n<li>Les éléments sans z-index explicite suivent l’ordre du DOM (dernier = au-dessus).</li>\n<li>Un nouveau contexte d’empilement peut être créé par certains styles (ex : <code>position</code> + <code>z-index</code>, <code>opacity &lt; 1</code>, <code>transform</code>, etc.).</li>\n</ul>\n\nValeurs :\n<ul>\n<li><code>z-index: auto;</code> — valeur par défaut, suit l’ordre naturel du DOM.</li>\n<li><code>z-index: 0, 1, 9999, etc.</code> — plus la valeur est grande, plus l’élément est au-dessus.</li>\n</ul>",
  "exemple": "Exemple\nVoici un exemple simple de superposition avec z-index :\n\n```html\n<div class=\"box box1\">Box 1</div>\n<div class=\"box box2\">Box 2</div>\n```\n\n```css\n.box {\n  position: absolute;\n  width: 150px;\n  height: 150px;\n  color: white;\n  padding: 10px;\n}\n\n.box1 {\n  background-color: blue;\n  top: 50px;\n  left: 50px;\n  z-index: 1;\n}\n\n.box2 {\n  background-color: red;\n  top: 100px;\n  left: 100px;\n  z-index: 2;\n}\n```\n\nRésultat : la boîte rouge (z-index: 2) s'affiche au-dessus de la boîte bleue (z-index: 1).",
  "sources": "Sources Web\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/z-index\">MDN - z-index</a></li>\n<li><a href=\"https://css-tricks.com/almanac/properties/z/z-index/\">CSS-Tricks - Guide du z-index</a></li>\n<li><a href=\"https://www.smashingmagazine.com/2021/07/css-z-index-contexts/\">Smashing Magazine - Comprendre les contextes d’empilement</a></li>\n</ul>",
  "infos_supplementaires": "Astuce : Utilisez l’outil Inspecteur du navigateur pour visualiser les contextes d’empilement et tester les valeurs de z-index en direct."
},
{
  "fichier": "fiche-035",
  "competence": "Compétence : Personnaliser une police (via @font-face, Google Fonts, variable fonts)",
  "objectif": "Objectif\nSavoir intégrer et personnaliser des polices d’écriture dans une page web à l’aide de différentes méthodes modernes.",
  "theorie": "Théorie\nLa personnalisation des polices permet d’améliorer l’identité visuelle d’un site. CSS offre plusieurs moyens d’utiliser des polices personnalisées :\n\n1. <strong>Google Fonts</strong> : bibliothèque gratuite de polices hébergées par Google.\n2. <strong>@font-face</strong> : permet d’héberger et d’utiliser ses propres fichiers de police.\n3. <strong>Variable fonts</strong> : polices dynamiques qui permettent d’ajuster plusieurs axes (graisse, largeur, inclinaison, etc.) avec un seul fichier.\n\nMéthodes :\n<ul>\n<li><strong>Google Fonts</strong> :\n  <pre><code>&lt;link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\"&gt;</code></pre>\n  <code>font-family: 'Roboto', sans-serif;</code>\n</li>\n<li><strong>@font-face</strong> :\n  <pre><code>@font-face {\n  font-family: 'MaPolice';\n  src: url('ma-police.woff2') format('woff2');\n}</code></pre>\n  <code>font-family: 'MaPolice';</code>\n</li>\n<li><strong>Variable fonts</strong> :\n  <pre><code>font-variation-settings: 'wght' 700, 'wdth' 100;</code></pre>\n</li>\n</ul>",
  "exemple": "Exemple\nVoici un exemple d’intégration d’une police Google Fonts :\n\n```html\n<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n  <meta charset=\"UTF-8\">\n  <link href=\"https://fonts.googleapis.com/css2?family=Montserrat:wght@300;600&display=swap\" rel=\"stylesheet\">\n  &lt;style&gt;\n    body {\n      font-family: 'Montserrat', sans-serif;\n    }\n    h1 {\n      font-weight: 600;\n    }\n    p {\n      font-weight: 300;\n    }\n  &lt;/style&gt;\n</head>\n<body>\n  <h1>Titre personnalisé</h1>\n  <p>Texte avec une police légère.</p>\n</body>\n</html>\n```",
  "sources": "Sources Web\n<ul>\n<li><a href=\"https://fonts.google.com/\">Google Fonts</a></li>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/@font-face\">MDN - @font-face</a></li>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/font-variation-settings\">MDN - font-variation-settings</a></li>\n</ul>",
  "infos_supplementaires": "Astuce : Pour de meilleures performances, privilégiez le format WOFF2 et limitez le nombre de variantes chargées."
},
{
  "fichier": "fiche-036",
  "competence": "Compétence : Adapter le style selon le médium (@media queries pour responsive design)",
  "objectif": "Objectif\nSavoir utiliser les media queries pour adapter l’apparence d’un site web à différents types d’écrans (mobile, tablette, desktop).",
  "theorie": "Théorie\nLes media queries permettent d’appliquer des styles CSS conditionnels en fonction des caractéristiques du périphérique (largeur, hauteur, résolution, orientation, etc.). Elles sont essentielles pour le responsive design.\n\nSyntaxe de base :\n```css\n@media (condition) {\n  /* styles CSS */\n}\n```\n\nExemples de conditions courantes :\n<ul>\n<li><code>max-width</code> — s’applique si la largeur de l’écran est inférieure ou égale à une valeur donnée.</li>\n<li><code>min-width</code> — s’applique si la largeur de l’écran est supérieure ou égale à une valeur donnée.</li>\n<li><code>orientation</code> — portrait ou landscape.</li>\n<li><code>resolution</code> — densité de pixels (ex : écrans Retina).</li>\n</ul>\n\nLes media queries peuvent être combinées avec <code>and</code>, <code>not</code>, ou <code>only</code> pour plus de précision.",
  "exemple": "Exemple\nVoici un exemple de mise en page responsive :\n\n```css\nbody {\n  font-size: 16px;\n}\n\n@media (max-width: 768px) {\n  body {\n    font-size: 14px;\n  }\n}\n\n@media (max-width: 480px) {\n  body {\n    font-size: 12px;\n  }\n}\n```\n\nCe code réduit la taille de la police sur les tablettes et encore plus sur les téléphones.",
  "sources": "Sources Web\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/Media_Queries\">MDN - Media Queries</a></li>\n<li><a href=\"https://css-tricks.com/a-complete-guide-to-css-media-queries/\">CSS-Tricks - Guide complet des media queries</a></li>\n<li><a href=\"https://web.dev/responsive-web-design-basics/\">Google Web.dev - Responsive Design</a></li>\n</ul>",
  "infos_supplementaires": "Astuce : Commencez par un design mobile-first avec des styles de base, puis utilisez des media queries avec min-width pour adapter aux écrans plus larges."
},
{
  "fichier": "fiche-037",
  "competence": "Compétence : Créer des mises en page multi-colonnes (column-count, column-gap, etc.)",
  "objectif": "Objectif\nSavoir utiliser les propriétés CSS de mise en page multi-colonnes pour organiser du contenu textuel de manière fluide et lisible.",
  "theorie": "Théorie\nLe module CSS Multi-column Layout permet de diviser un bloc de texte en plusieurs colonnes, à la manière d’un journal ou d’un magazine. Il est particulièrement utile pour les articles longs ou les zones de contenu dense.\n\nPropriétés principales :\n<ul>\n<li><strong>column-count</strong> — définit le nombre de colonnes souhaité.</li>\n<li><strong>column-width</strong> — définit la largeur idéale d’une colonne (le navigateur ajuste le nombre de colonnes en conséquence).</li>\n<li><strong>column-gap</strong> — définit l’espace entre les colonnes.</li>\n<li><strong>column-rule</strong> — ajoute une ligne de séparation entre les colonnes (style, épaisseur, couleur).</li>\n<li><strong>break-inside</strong> — contrôle les coupures d’éléments entre colonnes (avoid, auto).</li>\n</ul>\n\nCes propriétés peuvent être combinées pour un contrôle plus précis.",
  "exemple": "Exemple\nVoici un exemple de mise en page en deux colonnes avec une ligne de séparation :\n\n```html\n<div class=\"multi-colonnes\">\n  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus...</p>\n</div>\n```\n\n```css\n.multi-colonnes {\n  column-count: 2;\n  column-gap: 30px;\n  column-rule: 1px solid #ccc;\n}\n```",
  "sources": "Sources Web\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/CSS_Columns\">MDN - CSS Colonnes</a></li>\n<li><a href=\"https://css-tricks.com/guide-responsive-friendly-css-columns/\">CSS-Tricks - Guide des colonnes CSS</a></li>\n<li><a href=\"https://web.dev/css-multi-column/\">Google Web.dev - Multi-column Layout</a></li>\n</ul>",
  "infos_supplementaires": "Astuce : Combinez les colonnes avec des media queries pour adapter le nombre de colonnes selon la taille de l’écran."
},
{
  "fichier": "fiche-038",
  "competence": "Compétence : Créer des thèmes dynamiques avec :root et les variables CSS",
  "objectif": "Objectif\nApprendre à utiliser les variables CSS pour centraliser les styles et créer des thèmes facilement modifiables et dynamiques.",
  "theorie": "Théorie\nLes variables CSS (aussi appelées custom properties) permettent de stocker des valeurs réutilisables dans une feuille de style. Elles sont définies dans un sélecteur <code>:root</code> pour être accessibles globalement.\n\nSyntaxe :\n<ul>\n<li>Déclaration : <code>:root { --nom-variable: valeur; }</code></li>\n<li>Utilisation : <code>color: var(--nom-variable);</code></li>\n</ul>\n\nAvantages :\n<ul>\n<li>Facilitent la maintenance du code CSS.</li>\n<li>Permettent de créer des thèmes clairs/sombres ou personnalisés.</li>\n<li>Peuvent être modifiées dynamiquement via JavaScript.</li>\n</ul>\n\nIl est possible de redéfinir les variables dans des sélecteurs spécifiques (ex : <code>.dark-theme</code>) pour changer l’apparence globale.",
  "exemple": "Exemple\nVoici un exemple de thème clair/sombre avec des variables CSS :\n\n```css\n:root {\n  --bg-color: #ffffff;\n  --text-color: #000000;\n}\n\n.dark-theme {\n  --bg-color: #121212;\n  --text-color: #f0f0f0;\n}\n\nbody {\n  background-color: var(--bg-color);\n  color: var(--text-color);\n  transition: background-color 0.3s, color 0.3s;\n}\n```\n\n```html\n<body class=\"dark-theme\">\n  <p>Texte avec thème sombre</p>\n</body>\n```",
  "sources": "Sources Web\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/--*\">MDN - Variables CSS</a></li>\n<li><a href=\"https://css-tricks.com/css-variables-the-css-in-js-killer/\">CSS-Tricks - Guide des variables CSS</a></li>\n<li><a href=\"https://web.dev/learn/css/css-variables/\">Google Web.dev - CSS Variables</a></li>\n</ul>",
  "infos_supplementaires": "Astuce : Utilisez les variables CSS avec JavaScript pour permettre à l’utilisateur de changer de thème en un clic."
},
{
  "fichier": "fiche-039",
  "competence": "Compétence : Utiliser des conteneurs responsives (container queries)",
  "objectif": "Objectif\nApprendre à adapter le style d’un élément en fonction de la taille de son conteneur, et non de la fenêtre du navigateur.",
  "theorie": "Théorie\nLes container queries (ou requêtes de conteneur) permettent d’appliquer des styles CSS conditionnels en fonction des dimensions d’un conteneur parent, plutôt que de la taille de l’écran entier (comme avec les media queries).\n\nElles sont utiles pour créer des composants vraiment modulaires et réutilisables, qui s’adaptent à leur contexte d’affichage.\n\nActivation :\n<ul>\n<li>Le conteneur doit avoir une propriété <code>container-type</code> définie (ex : <code>container-type: inline-size;</code>).</li>\n<li>On peut aussi nommer un conteneur avec <code>container-name</code> pour des requêtes ciblées.</li>\n</ul>\n\nSyntaxe :\n```css\n@container (min-width: 400px) {\n  /* styles à appliquer si le conteneur fait au moins 400px de large */\n}\n```",
  "exemple": "Exemple\nVoici un composant qui change de style selon la largeur de son conteneur :\n\n```html\n<div class=\"card-container\">\n  <div class=\"card\">Contenu</div>\n</div>\n```\n\n```css\n.card-container {\n  container-type: inline-size;\n  width: 100%;\n  max-width: 600px;\n  border: 1px solid #ccc;\n}\n\n.card {\n  padding: 1rem;\n  background-color: lightgray;\n}\n\n@container (min-width: 400px) {\n  .card {\n    background-color: lightgreen;\n    font-size: 1.2rem;\n  }\n}\n```",
  "sources": "Sources Web\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/CSS_Container_Queries\">MDN - Container Queries</a></li>\n<li><a href=\"https://web.dev/learn/css/container-queries/\">Google Web.dev - Container Queries</a></li>\n<li><a href=\"https://css-tricks.com/container-queries-css/\">CSS-Tricks - Guide des container queries</a></li>\n</ul>",
  "infos_supplementaires": "Astuce : Combinez les container queries avec les variables CSS pour créer des composants adaptatifs et maintenables."
},
{
  "fichier": "fiche-040",
  "competence": "Compétence : Maîtriser les media queries complexes (orientation, résolution, etc.)",
  "objectif": "Objectif\nSavoir utiliser des media queries avancées pour adapter finement l’affichage selon les caractéristiques précises du périphérique.",
  "theorie": "Théorie\nLes media queries complexes permettent de cibler des conditions spécifiques comme l’orientation de l’écran, la résolution, ou encore le type de périphérique. Elles sont utiles pour optimiser l’expérience utilisateur sur une grande variété d’appareils.\n\nExemples de conditions avancées :\n<ul>\n<li><strong>orientation</strong> — <code>portrait</code> ou <code>landscape</code></li>\n<li><strong>resolution</strong> — densité de pixels (ex : <code>min-resolution: 2dppx</code> pour les écrans Retina)</li>\n<li><strong>aspect-ratio</strong> — rapport largeur/hauteur (ex : <code>aspect-ratio: 16/9</code>)</li>\n<li><strong>hover</strong> — détecte si l’appareil prend en charge le survol (ex : souris)</li>\n<li><strong>pointer</strong> — qualité du pointeur (fine, coarse, none)</li>\n</ul>\n\nCes requêtes peuvent être combinées avec <code>and</code>, <code>or</code>, <code>not</code> pour plus de précision.",
  "exemple": "Exemple\nVoici quelques media queries complexes :\n\n```css\n/* Mode paysage */\n@media (orientation: landscape) {\n  body {\n    background-color: lightblue;\n  }\n}\n\n/* Écrans haute résolution */\n@media (min-resolution: 2dppx) {\n  img {\n    content: url('image-haute-res.png');\n  }\n}\n\n/* Appareils sans survol */\n@media (hover: none) {\n  button:hover {\n    background-color: inherit;\n  }\n}\n```",
  "sources": "Sources Web\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/Media_Queries/Using_media_queries\">MDN - Utilisation des media queries</a></li>\n<li><a href=\"https://css-tricks.com/a-complete-guide-to-css-media-queries/\">CSS-Tricks - Guide complet des media queries</a></li>\n<li><a href=\"https://web.dev/learn/css/media-queries/\">Google Web.dev - Media Queries avancées</a></li>\n</ul>",
  "infos_supplementaires": "Astuce : Testez vos media queries sur différents appareils ou avec les outils de développement (onglet Responsive Design) pour vérifier leur bon fonctionnement."
},
{
  "fichier": "fiche-041",
  "competence": "Compétence : Gérer l’accessibilité via le style (contraste, focus visible, etc.)",
  "objectif": "Objectif\nAméliorer l’accessibilité des interfaces web en utilisant des styles CSS adaptés aux besoins des utilisateurs, notamment en matière de visibilité, de navigation clavier et de lisibilité.",
  "theorie": "Théorie\nL’accessibilité web vise à rendre les contenus utilisables par tous, y compris les personnes en situation de handicap. Le CSS joue un rôle important dans cette démarche en permettant d’améliorer la visibilité, la navigation et la compréhension du contenu.\n\nBonnes pratiques CSS pour l’accessibilité :\n<ul>\n<li><strong>Contraste suffisant</strong> — Assurez-vous que le contraste entre le texte et l’arrière-plan respecte les normes WCAG (au moins 4.5:1 pour le texte normal).</li>\n<li><strong>Focus visible</strong> — Utilisez <code>:focus</code> pour rendre les éléments interactifs visibles lors de la navigation au clavier.</li>\n<li><strong>Pas de contenu uniquement visuel</strong> — Évitez les informations transmises uniquement par la couleur ou l’animation.</li>\n<li><strong>Respect des préférences utilisateur</strong> — Utilisez <code>@media (prefers-reduced-motion)</code> pour désactiver les animations si l’utilisateur le demande.</li>\n</ul>",
  "exemple": "Exemple\nVoici un exemple de styles accessibles :\n\n```css\n/* Contraste élevé */\nbody {\n  background-color: #ffffff;\n  color: #111111;\n}\n\n/* Focus visible */\na:focus, button:focus {\n  outline: 3px solid #005fcc;\n  outline-offset: 2px;\n}\n\n/* Réduction des animations */\n@media (prefers-reduced-motion: reduce) {\n  * {\n    animation: none !important;\n    transition: none !important;\n  }\n}\n```",
  "sources": "Sources Web\n<ul>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/Accessibility\">MDN - Accessibilité Web</a></li>\n<li><a href=\"https://www.w3.org/WAI/WCAG21/quickref/\">W3C - Référentiel WCAG 2.1</a></li>\n<li><a href=\"https://web.dev/accessible/\">Google Web.dev - Accessibilité</a></li>\n</ul>",
  "infos_supplementaires": "Astuce : Utilisez des outils comme Lighthouse ou axe DevTools pour auditer automatiquement l’accessibilité de vos pages."
},
{
  "fichier": "fiche-042",
  "competence": "Compétence : Utiliser des préprocesseurs CSS comme Sass ou Less",
  "objectif": "Objectif\nComprendre le rôle des préprocesseurs CSS et apprendre à utiliser Sass ou Less pour écrire du CSS plus structuré, maintenable et puissant.",
  "theorie": "Théorie\nLes préprocesseurs CSS comme Sass et Less permettent d’ajouter des fonctionnalités avancées au CSS standard, telles que les variables, les fonctions, les boucles, les conditions, les imbrications, et les imports.\n\nPrincipaux avantages :\n<ul>\n<li><strong>Variables</strong> — stocker des valeurs réutilisables (couleurs, tailles, etc.).</li>\n<li><strong>Imbrication</strong> — écrire des sélecteurs imbriqués pour refléter la structure HTML.</li>\n<li><strong>Mixins</strong> — créer des blocs de styles réutilisables avec des paramètres.</li>\n<li><strong>Fonctions et opérations</strong> — effectuer des calculs dynamiques.</li>\n<li><strong>Modularité</strong> — diviser le code en fichiers partiels et les importer.</li>\n</ul>\n\nSass peut être utilisé en deux syntaxes :\n<ul>\n<li><code>.scss</code> — syntaxe proche du CSS classique.</li>\n<li><code>.sass</code> — syntaxe sans accolades ni points-virgules.</li>\n</ul>\n\nLes fichiers Sass ou Less doivent être compilés en CSS via des outils comme Dart Sass, Webpack, ou des extensions d’éditeurs.",
  "exemple": "Exemple\nVoici un exemple de fichier Sass (.scss) :\n\n```scss\n$primary-color: #3498db;\n$padding: 10px;\n\n.button {\n  background-color: $primary-color;\n  padding: $padding;\n  border-radius: 5px;\n\n  &:hover {\n    background-color: darken($primary-color, 10%);\n  }\n}\n```",
  "sources": "Sources Web\n<ul>\n<li><a href=\"https://sass-lang.com/guide\">Sass - Guide officiel</a></li>\n<li><a href=\"https://lesscss.org/\">Less - Documentation officielle</a></li>\n<li><a href=\"https://developer.mozilla.org/fr/docs/Web/CSS/CSS_Preprocessors\">MDN - Préprocesseurs CSS</a></li>\n</ul>",
  "infos_supplementaires": "Astuce : Utilisez des outils comme VS Code avec des extensions Sass pour bénéficier de la compilation automatique et de la coloration syntaxique."
}


]